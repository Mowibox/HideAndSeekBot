
LED_blink_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800540c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  0800541c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  0800541c  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f305  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001bcd  00000000  00000000  0002f343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  00030f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000998  00000000  00000000  00031940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e9d2  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d90d  00000000  00000000  00060caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131e62  00000000  00000000  0006e5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a0419  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029a0  00000000  00000000  001a046c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080053ac 	.word	0x080053ac

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080053ac 	.word	0x080053ac

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb5e 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f822 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8ea 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f894 	bl	800072c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f8de 	bl	80007c4 <MX_USB_OTG_HS_USB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000608:	2101      	movs	r1, #1
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <main+0x48>)
 800060c:	f000 feb5 	bl	800137a <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000610:	20fa      	movs	r0, #250	; 0xfa
 8000612:	f000 fbe1 	bl	8000dd8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 8000616:	2102      	movs	r1, #2
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0x4c>)
 800061a:	f000 feae 	bl	800137a <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800061e:	20fa      	movs	r0, #250	; 0xfa
 8000620:	f000 fbda 	bl	8000dd8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	f000 fea6 	bl	800137a <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800062e:	20fa      	movs	r0, #250	; 0xfa
 8000630:	f000 fbd2 	bl	8000dd8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000634:	e7e8      	b.n	8000608 <main+0x18>
 8000636:	bf00      	nop
 8000638:	58020400 	.word	0x58020400
 800063c:	58021000 	.word	0x58021000

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fea4 	bl	800539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fe9e 	bl	800539c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <SystemClock_Config+0xe4>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800066a:	2004      	movs	r0, #4
 800066c:	f000 fea0 	bl	80013b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <SystemClock_Config+0xe8>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xe8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068c:	bf00      	nop
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xe8>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069a:	d1f8      	bne.n	800068e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800069c:	2321      	movs	r3, #33	; 0x21
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fec4 	bl	8001464 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f991 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	233f      	movs	r3, #63	; 0x3f
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fadc 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000716:	f000 f977 	bl	8000a08 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58024400 	.word	0x58024400
 8000728:	58024800 	.word	0x58024800

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_USART3_UART_Init+0x94>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000776:	f003 fc13 	bl	8003fa0 <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f942 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000788:	f004 fd19 	bl	80051be <HAL_UARTEx_SetTxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000792:	f000 f939 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800079a:	f004 fd4e 	bl	800523a <HAL_UARTEx_SetRxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f930 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_USART3_UART_Init+0x90>)
 80007aa:	f004 fccf 	bl	800514c <HAL_UARTEx_DisableFifoMode>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f928 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2400002c 	.word	0x2400002c
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b80      	ldr	r3, [pc, #512]	; (80009ec <MX_GPIO_Init+0x218>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f0:	4a7e      	ldr	r2, [pc, #504]	; (80009ec <MX_GPIO_Init+0x218>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fa:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <MX_GPIO_Init+0x218>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000808:	4b78      	ldr	r3, [pc, #480]	; (80009ec <MX_GPIO_Init+0x218>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080e:	4a77      	ldr	r2, [pc, #476]	; (80009ec <MX_GPIO_Init+0x218>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000818:	4b74      	ldr	r3, [pc, #464]	; (80009ec <MX_GPIO_Init+0x218>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b71      	ldr	r3, [pc, #452]	; (80009ec <MX_GPIO_Init+0x218>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082c:	4a6f      	ldr	r2, [pc, #444]	; (80009ec <MX_GPIO_Init+0x218>)
 800082e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000836:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <MX_GPIO_Init+0x218>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b69      	ldr	r3, [pc, #420]	; (80009ec <MX_GPIO_Init+0x218>)
 8000846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084a:	4a68      	ldr	r2, [pc, #416]	; (80009ec <MX_GPIO_Init+0x218>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000854:	4b65      	ldr	r3, [pc, #404]	; (80009ec <MX_GPIO_Init+0x218>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	4b62      	ldr	r3, [pc, #392]	; (80009ec <MX_GPIO_Init+0x218>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000868:	4a60      	ldr	r2, [pc, #384]	; (80009ec <MX_GPIO_Init+0x218>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000872:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <MX_GPIO_Init+0x218>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	f003 0308 	and.w	r3, r3, #8
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000880:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <MX_GPIO_Init+0x218>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000886:	4a59      	ldr	r2, [pc, #356]	; (80009ec <MX_GPIO_Init+0x218>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000890:	4b56      	ldr	r3, [pc, #344]	; (80009ec <MX_GPIO_Init+0x218>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b53      	ldr	r3, [pc, #332]	; (80009ec <MX_GPIO_Init+0x218>)
 80008a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a4:	4a51      	ldr	r2, [pc, #324]	; (80009ec <MX_GPIO_Init+0x218>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ae:	4b4f      	ldr	r3, [pc, #316]	; (80009ec <MX_GPIO_Init+0x218>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008bc:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <MX_GPIO_Init+0x218>)
 80008be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c2:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <MX_GPIO_Init+0x218>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008cc:	4b47      	ldr	r3, [pc, #284]	; (80009ec <MX_GPIO_Init+0x218>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <MX_GPIO_Init+0x21c>)
 80008e2:	f000 fd31 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f244 0101 	movw	r1, #16385	; 0x4001
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x220>)
 80008ee:	f000 fd2b 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	4840      	ldr	r0, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x224>)
 80008f8:	f000 fd26 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <MX_GPIO_Init+0x228>)
 8000912:	f000 fb69 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4830      	ldr	r0, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x21c>)
 8000930:	f000 fb5a 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000934:	f244 0301 	movw	r3, #16385	; 0x4001
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x220>)
 800094e:	f000 fb4b 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	4826      	ldr	r0, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x22c>)
 8000968:	f000 fb3e 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800096c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_GPIO_Init+0x230>)
 8000982:	f000 fb31 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000998:	230a      	movs	r3, #10
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <MX_GPIO_Init+0x230>)
 80009a4:	f000 fb20 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <MX_GPIO_Init+0x230>)
 80009c2:	f000 fb11 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x224>)
 80009de:	f000 fb03 	bl	8000fe8 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	; 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58021400 	.word	0x58021400
 80009f4:	58020400 	.word	0x58020400
 80009f8:	58021000 	.word	0x58021000
 80009fc:	58020800 	.word	0x58020800
 8000a00:	58021800 	.word	0x58021800
 8000a04:	58020000 	.word	0x58020000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_MspInit+0x30>)
 8000a1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x30>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x30>)
 8000a2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	58024400 	.word	0x58024400

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0ba      	sub	sp, #232	; 0xe8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	22c0      	movs	r2, #192	; 0xc0
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fc97 	bl	800539c <memset>
  if(huart->Instance==USART3)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <HAL_UART_MspInit+0xc8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d146      	bne.n	8000b06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a78:	f04f 0202 	mov.w	r2, #2
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fca6 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a9a:	f7ff ffb5 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_UART_MspInit+0xcc>)
 8000aa0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <HAL_UART_MspInit+0xcc>)
 8000aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aaa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0xcc>)
 8000ab0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_UART_MspInit+0xcc>)
 8000abe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0xcc>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0xcc>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_UART_MspInit+0xd0>)
 8000b02:	f000 fa71 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	37e8      	adds	r7, #232	; 0xe8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004800 	.word	0x40004800
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020c00 	.word	0x58020c00

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f916 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <SystemInit+0xd0>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <SystemInit+0xd0>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <SystemInit+0xd4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d807      	bhi.n	8000ba0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <SystemInit+0xd4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <SystemInit+0xd4>)
 8000b9a:	f043 0303 	orr.w	r3, r3, #3
 8000b9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <SystemInit+0xd8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <SystemInit+0xd8>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <SystemInit+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <SystemInit+0xd8>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4924      	ldr	r1, [pc, #144]	; (8000c48 <SystemInit+0xd8>)
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <SystemInit+0xdc>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <SystemInit+0xd4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <SystemInit+0xd4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f023 030f 	bic.w	r3, r3, #15
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <SystemInit+0xd4>)
 8000bd4:	f043 0303 	orr.w	r3, r3, #3
 8000bd8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <SystemInit+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <SystemInit+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <SystemInit+0xd8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <SystemInit+0xd8>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <SystemInit+0xe0>)
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <SystemInit+0xd8>)
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <SystemInit+0xe4>)
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <SystemInit+0xd8>)
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <SystemInit+0xe8>)
 8000bfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <SystemInit+0xd8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <SystemInit+0xd8>)
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <SystemInit+0xe8>)
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <SystemInit+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <SystemInit+0xd8>)
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <SystemInit+0xe8>)
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <SystemInit+0xd8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SystemInit+0xd8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <SystemInit+0xd8>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <SystemInit+0xd8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <SystemInit+0xec>)
 8000c30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	52002000 	.word	0x52002000
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c50:	02020200 	.word	0x02020200
 8000c54:	01ff0000 	.word	0x01ff0000
 8000c58:	01010280 	.word	0x01010280
 8000c5c:	52004000 	.word	0x52004000

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c64:	f7ff ff84 	bl	8000b70 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f004 fb61 	bl	8005354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fcad 	bl	80005f0 <main>
  bx  lr
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ca0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ca4:	0800540c 	.word	0x0800540c
  ldr r2, =_sbss
 8000ca8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cac:	240000c4 	.word	0x240000c4

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f000 f962 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000cc0:	f001 f9b8 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_Init+0x68>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	4913      	ldr	r1, [pc, #76]	; (8000d20 <HAL_Init+0x6c>)
 8000cd2:	5ccb      	ldrb	r3, [r1, r3]
 8000cd4:	f003 031f 	and.w	r3, r3, #31
 8000cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cdc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_Init+0x68>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_Init+0x6c>)
 8000ce8:	5cd3      	ldrb	r3, [r2, r3]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_Init+0x70>)
 8000cf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_Init+0x74>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f814 	bl	8000d2c <HAL_InitTick>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e002      	b.n	8000d14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0e:	f7ff fe81 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	080053c4 	.word	0x080053c4
 8000d24:	24000004 	.word	0x24000004
 8000d28:	24000000 	.word	0x24000000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_InitTick+0x60>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e021      	b.n	8000d84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_InitTick+0x64>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_InitTick+0x60>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f939 	bl	8000fce <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f911 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x68>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2400000c 	.word	0x2400000c
 8000d90:	24000000 	.word	0x24000000
 8000d94:	24000008 	.word	0x24000008

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2400000c 	.word	0x2400000c
 8000dbc:	240000c0 	.word	0x240000c0

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	240000c0 	.word	0x240000c0

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2400000c 	.word	0x2400000c

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <__NVIC_SetPriorityGrouping+0x40>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x40>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	05fa0000 	.word	0x05fa0000

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff47 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff5e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff90 	bl	8000ed8 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5f 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffb2 	bl	8000f40 <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ff6:	4b89      	ldr	r3, [pc, #548]	; (800121c <HAL_GPIO_Init+0x234>)
 8000ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ffa:	e194      	b.n	8001326 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8186 	beq.w	8001320 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d005      	beq.n	800102c <HAL_GPIO_Init+0x44>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d130      	bne.n	800108e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001062:	2201      	movs	r2, #1
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	f003 0201 	and.w	r2, r3, #1
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b03      	cmp	r3, #3
 8001098:	d017      	beq.n	80010ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d123      	bne.n	800111e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	69b9      	ldr	r1, [r7, #24]
 800111a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0203 	and.w	r2, r3, #3
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80e0 	beq.w	8001320 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x238>)
 8001162:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <HAL_GPIO_Init+0x238>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <HAL_GPIO_Init+0x238>)
 8001172:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a29      	ldr	r2, [pc, #164]	; (8001224 <HAL_GPIO_Init+0x23c>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <HAL_GPIO_Init+0x240>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d052      	beq.n	8001250 <HAL_GPIO_Init+0x268>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_GPIO_Init+0x244>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d031      	beq.n	8001216 <HAL_GPIO_Init+0x22e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_GPIO_Init+0x248>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d02b      	beq.n	8001212 <HAL_GPIO_Init+0x22a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x24c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x226>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_GPIO_Init+0x250>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x222>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_GPIO_Init+0x254>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x21e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x258>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x21a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_GPIO_Init+0x25c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x216>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a18      	ldr	r2, [pc, #96]	; (8001248 <HAL_GPIO_Init+0x260>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x212>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_GPIO_Init+0x264>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x20e>
 80011f2:	2309      	movs	r3, #9
 80011f4:	e02d      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 80011f6:	230a      	movs	r3, #10
 80011f8:	e02b      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 80011fa:	2308      	movs	r3, #8
 80011fc:	e029      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 80011fe:	2307      	movs	r3, #7
 8001200:	e027      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 8001202:	2306      	movs	r3, #6
 8001204:	e025      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 8001206:	2305      	movs	r3, #5
 8001208:	e023      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 800120a:	2304      	movs	r3, #4
 800120c:	e021      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 800120e:	2303      	movs	r3, #3
 8001210:	e01f      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 8001212:	2302      	movs	r3, #2
 8001214:	e01d      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 8001216:	2301      	movs	r3, #1
 8001218:	e01b      	b.n	8001252 <HAL_GPIO_Init+0x26a>
 800121a:	bf00      	nop
 800121c:	58000080 	.word	0x58000080
 8001220:	58024400 	.word	0x58024400
 8001224:	58000400 	.word	0x58000400
 8001228:	58020000 	.word	0x58020000
 800122c:	58020400 	.word	0x58020400
 8001230:	58020800 	.word	0x58020800
 8001234:	58020c00 	.word	0x58020c00
 8001238:	58021000 	.word	0x58021000
 800123c:	58021400 	.word	0x58021400
 8001240:	58021800 	.word	0x58021800
 8001244:	58021c00 	.word	0x58021c00
 8001248:	58022000 	.word	0x58022000
 800124c:	58022400 	.word	0x58022400
 8001250:	2300      	movs	r3, #0
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	f002 0203 	and.w	r2, r2, #3
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	4093      	lsls	r3, r2
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001262:	4938      	ldr	r1, [pc, #224]	; (8001344 <HAL_GPIO_Init+0x35c>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800129e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3301      	adds	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	f47f ae63 	bne.w	8000ffc <HAL_GPIO_Init+0x14>
  }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	58000400 	.word	0x58000400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	041a      	lsls	r2, r3, #16
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43d9      	mvns	r1, r3
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	400b      	ands	r3, r1
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d00a      	beq.n	80013da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_PWREx_ConfigSupply+0xb0>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e040      	b.n	8001458 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e03e      	b.n	8001458 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_PWREx_ConfigSupply+0xb0>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013e2:	491f      	ldr	r1, [pc, #124]	; (8001460 <HAL_PWREx_ConfigSupply+0xb0>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013ea:	f7ff fce9 	bl	8000dc0 <HAL_GetTick>
 80013ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013f0:	e009      	b.n	8001406 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013f2:	f7ff fce5 	bl	8000dc0 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001400:	d901      	bls.n	8001406 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e028      	b.n	8001458 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_PWREx_ConfigSupply+0xb0>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001412:	d1ee      	bne.n	80013f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b1e      	cmp	r3, #30
 8001418:	d008      	beq.n	800142c <HAL_PWREx_ConfigSupply+0x7c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b2e      	cmp	r3, #46	; 0x2e
 800141e:	d005      	beq.n	800142c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b1d      	cmp	r3, #29
 8001424:	d002      	beq.n	800142c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b2d      	cmp	r3, #45	; 0x2d
 800142a:	d114      	bne.n	8001456 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800142c:	f7ff fcc8 	bl	8000dc0 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001432:	e009      	b.n	8001448 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001434:	f7ff fcc4 	bl	8000dc0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001442:	d901      	bls.n	8001448 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e007      	b.n	8001458 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_PWREx_ConfigSupply+0xb0>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d1ee      	bne.n	8001434 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024800 	.word	0x58024800

08001464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	f000 bc1f 	b.w	8001cb6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80b3 	beq.w	80015ec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001486:	4b95      	ldr	r3, [pc, #596]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	2b10      	cmp	r3, #16
 800149a:	d007      	beq.n	80014ac <HAL_RCC_OscConfig+0x48>
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	2b18      	cmp	r3, #24
 80014a0:	d112      	bne.n	80014c8 <HAL_RCC_OscConfig+0x64>
 80014a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10d      	bne.n	80014c8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8098 	beq.w	80015ea <HAL_RCC_OscConfig+0x186>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 8093 	bne.w	80015ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e3f6      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x7c>
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a81      	ldr	r2, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e058      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0xaa>
 80014e8:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a7b      	ldr	r2, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b79      	ldr	r3, [pc, #484]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a78      	ldr	r2, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80014fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a75      	ldr	r2, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e041      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001516:	d112      	bne.n	800153e <HAL_RCC_OscConfig+0xda>
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6f      	ldr	r2, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800151e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6c      	ldr	r2, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800152a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a69      	ldr	r2, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e029      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001546:	d112      	bne.n	800156e <HAL_RCC_OscConfig+0x10a>
 8001548:	4b64      	ldr	r3, [pc, #400]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a63      	ldr	r2, [pc, #396]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a60      	ldr	r2, [pc, #384]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800155a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a5d      	ldr	r2, [pc, #372]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e011      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5a      	ldr	r2, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b58      	ldr	r3, [pc, #352]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a57      	ldr	r2, [pc, #348]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a54      	ldr	r2, [pc, #336]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800158c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001590:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d013      	beq.n	80015c2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fc11 	bl	8000dc0 <HAL_GetTick>
 800159e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a2:	f7ff fc0d 	bl	8000dc0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	; 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e380      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x13e>
 80015c0:	e014      	b.n	80015ec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fbfd 	bl	8000dc0 <HAL_GetTick>
 80015c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ca:	f7ff fbf9 	bl	8000dc0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e36c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015dc:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x166>
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 808c 	beq.w	8001712 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001602:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_RCC_OscConfig+0x1bc>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b18      	cmp	r3, #24
 8001614:	d137      	bne.n	8001686 <HAL_RCC_OscConfig+0x222>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d132      	bne.n	8001686 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x1d4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e33e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 0219 	bic.w	r2, r3, #25
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4925      	ldr	r1, [pc, #148]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fbb9 	bl	8000dc0 <HAL_GetTick>
 800164e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fbb5 	bl	8000dc0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e328      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4917      	ldr	r1, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d028      	beq.n	80016e0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0219 	bic.w	r2, r3, #25
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4910      	ldr	r1, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb8e 	bl	8000dc0 <HAL_GetTick>
 80016a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fb8a 	bl	8000dc0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e2fd      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	4901      	ldr	r1, [pc, #4]	; (80016dc <HAL_RCC_OscConfig+0x278>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
 80016da:	e01a      	b.n	8001712 <HAL_RCC_OscConfig+0x2ae>
 80016dc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e0:	4b97      	ldr	r3, [pc, #604]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a96      	ldr	r2, [pc, #600]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb68 	bl	8000dc0 <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff fb64 	bl	8000dc0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e2d7      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001706:	4b8e      	ldr	r3, [pc, #568]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06a      	beq.n	80017f4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001726:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001728:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d007      	beq.n	8001744 <HAL_RCC_OscConfig+0x2e0>
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b18      	cmp	r3, #24
 8001738:	d11b      	bne.n	8001772 <HAL_RCC_OscConfig+0x30e>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001744:	4b7e      	ldr	r3, [pc, #504]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x2f8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b80      	cmp	r3, #128	; 0x80
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e2ac      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800175c:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4975      	ldr	r1, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800177a:	4b71      	ldr	r3, [pc, #452]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a70      	ldr	r2, [pc, #448]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fb1b 	bl	8000dc0 <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800178e:	f7ff fb17 	bl	8000dc0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e28a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017a0:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ac:	4b64      	ldr	r3, [pc, #400]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	4961      	ldr	r1, [pc, #388]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	60cb      	str	r3, [r1, #12]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017c2:	4b5f      	ldr	r3, [pc, #380]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5e      	ldr	r2, [pc, #376]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80017c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff faf7 	bl	8000dc0 <HAL_GetTick>
 80017d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017d6:	f7ff faf3 	bl	8000dc0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e266      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d036      	beq.n	800186e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d019      	beq.n	800183c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800180a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180c:	4a4c      	ldr	r2, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff fad4 	bl	8000dc0 <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fad0 	bl	8000dc0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e243      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800182e:	4b44      	ldr	r3, [pc, #272]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x3b8>
 800183a:	e018      	b.n	800186e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	4b40      	ldr	r3, [pc, #256]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff faba 	bl	8000dc0 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fab6 	bl	8000dc0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e229      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b00      	cmp	r3, #0
 8001878:	d036      	beq.n	80018e8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d019      	beq.n	80018b6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800188c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800188e:	f7ff fa97 	bl	8000dc0 <HAL_GetTick>
 8001892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001896:	f7ff fa93 	bl	8000dc0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e206      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x432>
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80018bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa7d 	bl	8000dc0 <HAL_GetTick>
 80018c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ca:	f7ff fa79 	bl	8000dc0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1ec      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80af 	beq.w	8001a54 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_RCC_OscConfig+0x4e0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_RCC_OscConfig+0x4e0>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001902:	f7ff fa5d 	bl	8000dc0 <HAL_GetTick>
 8001906:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff fa59 	bl	8000dc0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	; 0x64
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1cc      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x4e0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10b      	bne.n	8001948 <HAL_RCC_OscConfig+0x4e4>
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a02      	ldr	r2, [pc, #8]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	e05b      	b.n	80019f6 <HAL_RCC_OscConfig+0x592>
 800193e:	bf00      	nop
 8001940:	58024400 	.word	0x58024400
 8001944:	58024800 	.word	0x58024800
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x512>
 8001950:	4b9d      	ldr	r3, [pc, #628]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a9c      	ldr	r2, [pc, #624]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	4b9a      	ldr	r3, [pc, #616]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a99      	ldr	r2, [pc, #612]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
 8001968:	4b97      	ldr	r3, [pc, #604]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a96      	ldr	r2, [pc, #600]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 800196e:	f023 0304 	bic.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	e03f      	b.n	80019f6 <HAL_RCC_OscConfig+0x592>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d112      	bne.n	80019a4 <HAL_RCC_OscConfig+0x540>
 800197e:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a8e      	ldr	r2, [pc, #568]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a8b      	ldr	r2, [pc, #556]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	e028      	b.n	80019f6 <HAL_RCC_OscConfig+0x592>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b85      	cmp	r3, #133	; 0x85
 80019aa:	d112      	bne.n	80019d2 <HAL_RCC_OscConfig+0x56e>
 80019ac:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a82      	ldr	r2, [pc, #520]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e011      	b.n	80019f6 <HAL_RCC_OscConfig+0x592>
 80019d2:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a7c      	ldr	r2, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	4a76      	ldr	r2, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 80019f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d015      	beq.n	8001a2a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f9df 	bl	8000dc0 <HAL_GetTick>
 8001a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff f9db 	bl	8000dc0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e14c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ee      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5a2>
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f9c9 	bl	8000dc0 <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff f9c5 	bl	8000dc0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e136      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a48:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ee      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 812b 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a66:	2b18      	cmp	r3, #24
 8001a68:	f000 80bb 	beq.w	8001be2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	f040 8095 	bne.w	8001ba0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b54      	ldr	r3, [pc, #336]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a53      	ldr	r2, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f99d 	bl	8000dc0 <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f999 	bl	8000dc0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e10c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aac:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x768>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	430a      	orrs	r2, r1
 8001abc:	4942      	ldr	r1, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	628b      	str	r3, [r1, #40]	; 0x28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	025b      	lsls	r3, r3, #9
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	3b01      	subs	r3, #1
 8001aec:	061b      	lsls	r3, r3, #24
 8001aee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001af2:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b08:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b10:	00d2      	lsls	r2, r2, #3
 8001b12:	492d      	ldr	r1, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f023 020c 	bic.w	r2, r3, #12
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	4928      	ldr	r1, [pc, #160]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f023 0202 	bic.w	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4924      	ldr	r1, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f922 	bl	8000dc0 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff f91e 	bl	8000dc0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e091      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x71c>
 8001b9e:	e089      	b.n	8001cb4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_RCC_OscConfig+0x764>)
 8001ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f908 	bl	8000dc0 <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f904 	bl	8000dc0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e077      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
 8001bc6:	bf00      	nop
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	fffffc0c 	.word	0xfffffc0c
 8001bd0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e9      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x750>
 8001be0:	e068      	b.n	8001cb4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d031      	beq.n	8001c5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d12a      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d122      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d11a      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	0a5b      	lsrs	r3, r3, #9
 8001c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d111      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d108      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	0e1b      	lsrs	r3, r3, #24
 8001c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e02b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c68:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d01f      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c80:	f7ff f89e 	bl	8000dc0 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c86:	bf00      	nop
 8001c88:	f7ff f89a 	bl	8000dc0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d0f9      	beq.n	8001c88 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x860>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_RCC_OscConfig+0x85c>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	ffff0007 	.word	0xffff0007

08001cc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e19c      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d910      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b87      	ldr	r3, [pc, #540]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	4985      	ldr	r1, [pc, #532]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e184      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d010      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d908      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d28:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4975      	ldr	r1, [pc, #468]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d010      	beq.n	8001d68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	496a      	ldr	r1, [pc, #424]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d84:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	495e      	ldr	r1, [pc, #376]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d908      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001db2:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4953      	ldr	r1, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f023 020f 	bic.w	r2, r3, #15
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4947      	ldr	r1, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d055      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4940      	ldr	r1, [pc, #256]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d121      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0f6      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d115      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0ea      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0de      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e58:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0d6      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f023 0207 	bic.w	r2, r3, #7
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7a:	f7fe ffa1 	bl	8000dc0 <HAL_GetTick>
 8001e7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7fe ff9d 	bl	8000dc0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0be      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d1eb      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d208      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f023 020f 	bic.w	r2, r3, #15
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d214      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 020f 	bic.w	r2, r3, #15
 8001eee:	4906      	ldr	r1, [pc, #24]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e086      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
 8001f08:	52002000 	.word	0x52002000
 8001f0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d208      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	4939      	ldr	r1, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d208      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	492e      	ldr	r1, [pc, #184]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d010      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d208      	bcs.n	8001f9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4922      	ldr	r1, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d208      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4917      	ldr	r1, [pc, #92]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fc8:	f000 f834 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	4912      	ldr	r1, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x35c>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_RCC_ClockConfig+0x35c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x360>)
 8001ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x364>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x368>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fe8e 	bl	8000d2c <HAL_InitTick>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	58024400 	.word	0x58024400
 8002024:	080053c4 	.word	0x080053c4
 8002028:	24000004 	.word	0x24000004
 800202c:	24000000 	.word	0x24000000
 8002030:	24000008 	.word	0x24000008

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203a:	4bb3      	ldr	r3, [pc, #716]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002042:	2b18      	cmp	r3, #24
 8002044:	f200 8155 	bhi.w	80022f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_RCC_GetSysClockFreq+0x1c>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	080020b5 	.word	0x080020b5
 8002054:	080022f3 	.word	0x080022f3
 8002058:	080022f3 	.word	0x080022f3
 800205c:	080022f3 	.word	0x080022f3
 8002060:	080022f3 	.word	0x080022f3
 8002064:	080022f3 	.word	0x080022f3
 8002068:	080022f3 	.word	0x080022f3
 800206c:	080022f3 	.word	0x080022f3
 8002070:	080020db 	.word	0x080020db
 8002074:	080022f3 	.word	0x080022f3
 8002078:	080022f3 	.word	0x080022f3
 800207c:	080022f3 	.word	0x080022f3
 8002080:	080022f3 	.word	0x080022f3
 8002084:	080022f3 	.word	0x080022f3
 8002088:	080022f3 	.word	0x080022f3
 800208c:	080022f3 	.word	0x080022f3
 8002090:	080020e1 	.word	0x080020e1
 8002094:	080022f3 	.word	0x080022f3
 8002098:	080022f3 	.word	0x080022f3
 800209c:	080022f3 	.word	0x080022f3
 80020a0:	080022f3 	.word	0x080022f3
 80020a4:	080022f3 	.word	0x080022f3
 80020a8:	080022f3 	.word	0x080022f3
 80020ac:	080022f3 	.word	0x080022f3
 80020b0:	080020e7 	.word	0x080020e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020b4:	4b94      	ldr	r3, [pc, #592]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020c0:	4b91      	ldr	r3, [pc, #580]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020d2:	e111      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020d4:	4b8d      	ldr	r3, [pc, #564]	; (800230c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020d6:	61bb      	str	r3, [r7, #24]
      break;
 80020d8:	e10e      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80020da:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020dc:	61bb      	str	r3, [r7, #24]
      break;
 80020de:	e10b      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020e2:	61bb      	str	r3, [r7, #24]
      break;
 80020e4:	e108      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020f0:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020fc:	4b82      	ldr	r3, [pc, #520]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002106:	4b80      	ldr	r3, [pc, #512]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	08db      	lsrs	r3, r3, #3
 800210c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80e1 	beq.w	80022ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b02      	cmp	r3, #2
 800212e:	f000 8083 	beq.w	8002238 <HAL_RCC_GetSysClockFreq+0x204>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b02      	cmp	r3, #2
 8002136:	f200 80a1 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x248>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x114>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d056      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002146:	e099      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02d      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	4a6b      	ldr	r2, [pc, #428]	; (800230c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217e:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002192:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021ae:	e087      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800231c <HAL_RCC_GetSysClockFreq+0x2e8>
 80021be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021f2:	e065      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002320 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002216:	ed97 6a02 	vldr	s12, [r7, #8]
 800221a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 800221e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800222a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002236:	e043      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002242:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224a:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225a:	ed97 6a02 	vldr	s12, [r7, #8]
 800225e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800227a:	e021      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002320 <HAL_RCC_GetSysClockFreq+0x2ec>
 800228a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229e:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	0a5b      	lsrs	r3, r3, #9
 80022c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ca:	3301      	adds	r3, #1
 80022cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80022dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e4:	ee17 3a90 	vmov	r3, s15
 80022e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022ea:	e005      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
      break;
 80022f0:	e002      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022f4:	61bb      	str	r3, [r7, #24]
      break;
 80022f6:	bf00      	nop
  }

  return sysclockfreq;
 80022f8:	69bb      	ldr	r3, [r7, #24]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	58024400 	.word	0x58024400
 800230c:	03d09000 	.word	0x03d09000
 8002310:	003d0900 	.word	0x003d0900
 8002314:	007a1200 	.word	0x007a1200
 8002318:	46000000 	.word	0x46000000
 800231c:	4c742400 	.word	0x4c742400
 8002320:	4a742400 	.word	0x4a742400
 8002324:	4af42400 	.word	0x4af42400

08002328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800232e:	f7ff fe81 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_GetHCLKFreq+0x50>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490f      	ldr	r1, [pc, #60]	; (800237c <HAL_RCC_GetHCLKFreq+0x54>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_GetHCLKFreq+0x50>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_GetHCLKFreq+0x54>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_RCC_GetHCLKFreq+0x58>)
 8002364:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_RCC_GetHCLKFreq+0x58>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58024400 	.word	0x58024400
 800237c:	080053c4 	.word	0x080053c4
 8002380:	24000004 	.word	0x24000004
 8002384:	24000000 	.word	0x24000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800238c:	f7ff ffcc 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024400 	.word	0x58024400
 80023b0:	080053c4 	.word	0x080053c4

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80023b8:	f7ff ffb6 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58024400 	.word	0x58024400
 80023dc:	080053c4 	.word	0x080053c4

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b0c8      	sub	sp, #288	; 0x120
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002404:	2500      	movs	r5, #0
 8002406:	ea54 0305 	orrs.w	r3, r4, r5
 800240a:	d049      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800240c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002416:	d02f      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800241c:	d828      	bhi.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800241e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002422:	d01a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002428:	d822      	bhi.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800242e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002432:	d007      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002434:	e01c      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002436:	4ba7      	ldr	r3, [pc, #668]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	4aa6      	ldr	r2, [pc, #664]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002442:	e01a      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002448:	3308      	adds	r3, #8
 800244a:	2102      	movs	r1, #2
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fc43 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002452:	4603      	mov	r3, r0
 8002454:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002458:	e00f      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800245a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800245e:	3328      	adds	r3, #40	; 0x28
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fcea 	bl	8003e3c <RCCEx_PLL3_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800246e:	e004      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002476:	e000      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800247a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002482:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002486:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800248a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800248e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002490:	4a90      	ldr	r2, [pc, #576]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002492:	430b      	orrs	r3, r1
 8002494:	6513      	str	r3, [r2, #80]	; 0x50
 8002496:	e003      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002498:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800249c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80024ac:	f04f 0900 	mov.w	r9, #0
 80024b0:	ea58 0309 	orrs.w	r3, r8, r9
 80024b4:	d047      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d82a      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024c0:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	080024eb 	.word	0x080024eb
 80024d0:	08002501 	.word	0x08002501
 80024d4:	0800251f 	.word	0x0800251f
 80024d8:	0800251f 	.word	0x0800251f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024dc:	4b7d      	ldr	r3, [pc, #500]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	4a7c      	ldr	r2, [pc, #496]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024e8:	e01a      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ee:	3308      	adds	r3, #8
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 fbf0 	bl	8003cd8 <RCCEx_PLL2_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024fe:	e00f      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002504:	3328      	adds	r3, #40	; 0x28
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f001 fc97 	bl	8003e3c <RCCEx_PLL3_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002514:	e004      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800251c:	e000      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800251e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	f023 0107 	bic.w	r1, r3, #7
 8002530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a67      	ldr	r2, [pc, #412]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002538:	430b      	orrs	r3, r1
 800253a:	6513      	str	r3, [r2, #80]	; 0x50
 800253c:	e003      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002542:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002552:	f04f 0b00 	mov.w	fp, #0
 8002556:	ea5a 030b 	orrs.w	r3, sl, fp
 800255a:	d054      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800255c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002566:	d036      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002568:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800256c:	d82f      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800256e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002572:	d032      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d829      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800257a:	2bc0      	cmp	r3, #192	; 0xc0
 800257c:	d02f      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800257e:	2bc0      	cmp	r3, #192	; 0xc0
 8002580:	d825      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d018      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d821      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d007      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002592:	e01c      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002594:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4a4e      	ldr	r2, [pc, #312]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80025a0:	e01e      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a6:	3308      	adds	r3, #8
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 fb94 	bl	8003cd8 <RCCEx_PLL2_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80025b6:	e013      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025bc:	3328      	adds	r3, #40	; 0x28
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fc3b 	bl	8003e3c <RCCEx_PLL3_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80025cc:	e008      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025d4:	e004      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80025f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6513      	str	r3, [r2, #80]	; 0x50
 80025fc:	e003      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002602:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002612:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800261c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002620:	460b      	mov	r3, r1
 8002622:	4313      	orrs	r3, r2
 8002624:	d05c      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002630:	d03b      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002632:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002636:	d834      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263c:	d037      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800263e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002642:	d82e      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002644:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002648:	d033      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800264a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800264e:	d828      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002654:	d01a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d822      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002664:	d007      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002666:	e01c      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800266e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002674:	e01e      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800267a:	3308      	adds	r3, #8
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f001 fb2a 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800268a:	e013      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800268c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002690:	3328      	adds	r3, #40	; 0x28
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f001 fbd1 	bl	8003e3c <RCCEx_PLL3_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80026a0:	e008      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026a8:	e004      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80026b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80026c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6513      	str	r3, [r2, #80]	; 0x50
 80026d0:	e006      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80026e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80026ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026fa:	460b      	mov	r3, r1
 80026fc:	4313      	orrs	r3, r2
 80026fe:	d03a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	2b30      	cmp	r3, #48	; 0x30
 8002708:	d01f      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800270a:	2b30      	cmp	r3, #48	; 0x30
 800270c:	d819      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800270e:	2b20      	cmp	r3, #32
 8002710:	d00c      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002712:	2b20      	cmp	r3, #32
 8002714:	d815      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002716:	2b00      	cmp	r3, #0
 8002718:	d019      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800271a:	2b10      	cmp	r3, #16
 800271c:	d111      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271e:	4bae      	ldr	r3, [pc, #696]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	4aad      	ldr	r2, [pc, #692]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800272c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002730:	3308      	adds	r3, #8
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f001 facf 	bl	8003cd8 <RCCEx_PLL2_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002740:	e006      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002748:	e002      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800274a:	bf00      	nop
 800274c:	e000      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800274e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002758:	4b9f      	ldr	r3, [pc, #636]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a9c      	ldr	r2, [pc, #624]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002768:	430b      	orrs	r3, r1
 800276a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002772:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800278c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002790:	460b      	mov	r3, r1
 8002792:	4313      	orrs	r3, r2
 8002794:	d051      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800279a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a0:	d035      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a6:	d82e      	bhi.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80027a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027ac:	d031      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80027ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027b2:	d828      	bhi.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b8:	d01a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027be:	d822      	bhi.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c8:	d007      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80027ca:	e01c      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027cc:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a81      	ldr	r2, [pc, #516]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027d8:	e01c      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027de:	3308      	adds	r3, #8
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fa78 	bl	8003cd8 <RCCEx_PLL2_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027ee:	e011      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f4:	3328      	adds	r3, #40	; 0x28
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 fb1f 	bl	8003e3c <RCCEx_PLL3_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002804:	e006      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800280c:	e002      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800281c:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002820:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282a:	4a6b      	ldr	r2, [pc, #428]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800282c:	430b      	orrs	r3, r1
 800282e:	6513      	str	r3, [r2, #80]	; 0x50
 8002830:	e003      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002832:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002836:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800283a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002850:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002854:	460b      	mov	r3, r1
 8002856:	4313      	orrs	r3, r2
 8002858:	d053      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800285a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800285e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d033      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286a:	d82c      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800286c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002870:	d02f      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002876:	d826      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800287c:	d02b      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800287e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002882:	d820      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002888:	d012      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800288a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800288e:	d81a      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d022      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d115      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800289a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800289e:	3308      	adds	r3, #8
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fa18 	bl	8003cd8 <RCCEx_PLL2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028ae:	e015      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b4:	3328      	adds	r3, #40	; 0x28
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fabf 	bl	8003e3c <RCCEx_PLL3_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028c4:	e00a      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028ce:	bf00      	nop
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028e4:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80028ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f2:	4a39      	ldr	r2, [pc, #228]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6513      	str	r3, [r2, #80]	; 0x50
 80028f8:	e003      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800290e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002918:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800291c:	460b      	mov	r3, r1
 800291e:	4313      	orrs	r3, r2
 8002920:	d060      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800292a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800292e:	d039      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002930:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002934:	d832      	bhi.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293a:	d035      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800293c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002940:	d82c      	bhi.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d031      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d826      	bhi.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800294e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002952:	d02d      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002958:	d820      	bhi.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800295a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295e:	d012      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002964:	d81a      	bhi.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296e:	d115      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002974:	3308      	adds	r3, #8
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f001 f9ad 	bl	8003cd8 <RCCEx_PLL2_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002984:	e017      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298a:	3328      	adds	r3, #40	; 0x28
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f001 fa54 	bl	8003e3c <RCCEx_PLL3_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800299a:	e00c      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029a2:	e008      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029a4:	bf00      	nop
 80029a6:	e006      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029a8:	bf00      	nop
 80029aa:	e004      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80029c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029ce:	4a02      	ldr	r2, [pc, #8]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029fe:	460b      	mov	r3, r1
 8002a00:	4313      	orrs	r3, r2
 8002a02:	d037      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0e:	d00e      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a14:	d816      	bhi.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a20:	4bc4      	ldr	r3, [pc, #784]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4ac3      	ldr	r2, [pc, #780]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a2c:	e00f      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a32:	3308      	adds	r3, #8
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 f94e 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a42:	e004      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a4a:	e000      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a56:	4bb7      	ldr	r3, [pc, #732]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a64:	4ab3      	ldr	r2, [pc, #716]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a66:	430b      	orrs	r3, r1
 8002a68:	6513      	str	r3, [r2, #80]	; 0x50
 8002a6a:	e003      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4313      	orrs	r3, r2
 8002a92:	d039      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d81c      	bhi.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a9e:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ae1 	.word	0x08002ae1
 8002aa8:	08002ab5 	.word	0x08002ab5
 8002aac:	08002ac3 	.word	0x08002ac3
 8002ab0:	08002ae1 	.word	0x08002ae1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab4:	4b9f      	ldr	r3, [pc, #636]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	4a9e      	ldr	r2, [pc, #632]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ac0:	e00f      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 f904 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ad6:	e004      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aea:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	f023 0103 	bic.w	r1, r3, #3
 8002af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af8:	4a8e      	ldr	r2, [pc, #568]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002afa:	430b      	orrs	r3, r1
 8002afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afe:	e003      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b22:	460b      	mov	r3, r1
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f000 8099 	beq.w	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b2a:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a82      	ldr	r2, [pc, #520]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b36:	f7fe f943 	bl	8000dc0 <HAL_GetTick>
 8002b3a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b40:	f7fe f93e 	bl	8000dc0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	; 0x64
 8002b4e:	d903      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b56:	e005      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b58:	4b77      	ldr	r3, [pc, #476]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ed      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d173      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b6c:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b78:	4053      	eors	r3, r2
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b82:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b8e:	4b69      	ldr	r3, [pc, #420]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a68      	ldr	r2, [pc, #416]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9a:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ba6:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d118      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe f900 	bl	8000dc0 <HAL_GetTick>
 8002bc0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc4:	e00d      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe f8fb 	bl	8000dc0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bd0:	1ad2      	subs	r2, r2, r3
 8002bd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d903      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002be0:	e005      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0eb      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002bee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d129      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c06:	d10e      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c18:	091a      	lsrs	r2, r3, #4
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	4a45      	ldr	r2, [pc, #276]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6113      	str	r3, [r2, #16]
 8002c24:	e005      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c30:	6113      	str	r3, [r2, #16]
 8002c32:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c34:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c42:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e008      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002c52:	e003      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f002 0301 	and.w	r3, r2, #1
 8002c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f000 8090 	beq.w	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c86:	2b28      	cmp	r3, #40	; 0x28
 8002c88:	d870      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002d75 	.word	0x08002d75
 8002c94:	08002d6d 	.word	0x08002d6d
 8002c98:	08002d6d 	.word	0x08002d6d
 8002c9c:	08002d6d 	.word	0x08002d6d
 8002ca0:	08002d6d 	.word	0x08002d6d
 8002ca4:	08002d6d 	.word	0x08002d6d
 8002ca8:	08002d6d 	.word	0x08002d6d
 8002cac:	08002d6d 	.word	0x08002d6d
 8002cb0:	08002d41 	.word	0x08002d41
 8002cb4:	08002d6d 	.word	0x08002d6d
 8002cb8:	08002d6d 	.word	0x08002d6d
 8002cbc:	08002d6d 	.word	0x08002d6d
 8002cc0:	08002d6d 	.word	0x08002d6d
 8002cc4:	08002d6d 	.word	0x08002d6d
 8002cc8:	08002d6d 	.word	0x08002d6d
 8002ccc:	08002d6d 	.word	0x08002d6d
 8002cd0:	08002d57 	.word	0x08002d57
 8002cd4:	08002d6d 	.word	0x08002d6d
 8002cd8:	08002d6d 	.word	0x08002d6d
 8002cdc:	08002d6d 	.word	0x08002d6d
 8002ce0:	08002d6d 	.word	0x08002d6d
 8002ce4:	08002d6d 	.word	0x08002d6d
 8002ce8:	08002d6d 	.word	0x08002d6d
 8002cec:	08002d6d 	.word	0x08002d6d
 8002cf0:	08002d75 	.word	0x08002d75
 8002cf4:	08002d6d 	.word	0x08002d6d
 8002cf8:	08002d6d 	.word	0x08002d6d
 8002cfc:	08002d6d 	.word	0x08002d6d
 8002d00:	08002d6d 	.word	0x08002d6d
 8002d04:	08002d6d 	.word	0x08002d6d
 8002d08:	08002d6d 	.word	0x08002d6d
 8002d0c:	08002d6d 	.word	0x08002d6d
 8002d10:	08002d75 	.word	0x08002d75
 8002d14:	08002d6d 	.word	0x08002d6d
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002d6d 	.word	0x08002d6d
 8002d20:	08002d6d 	.word	0x08002d6d
 8002d24:	08002d6d 	.word	0x08002d6d
 8002d28:	08002d6d 	.word	0x08002d6d
 8002d2c:	08002d6d 	.word	0x08002d6d
 8002d30:	08002d75 	.word	0x08002d75
 8002d34:	58024400 	.word	0x58024400
 8002d38:	58024800 	.word	0x58024800
 8002d3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d44:	3308      	adds	r3, #8
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 ffc5 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5a:	3328      	adds	r3, #40	; 0x28
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f86c 	bl	8003e3c <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d7e:	4bc0      	ldr	r3, [pc, #768]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8e:	4abc      	ldr	r2, [pc, #752]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6553      	str	r3, [r2, #84]	; 0x54
 8002d94:	e003      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f002 0302 	and.w	r3, r2, #2
 8002daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002db4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002db8:	460b      	mov	r3, r1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	d043      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d824      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e1d 	.word	0x08002e1d
 8002dd4:	08002de9 	.word	0x08002de9
 8002dd8:	08002dff 	.word	0x08002dff
 8002ddc:	08002e1d 	.word	0x08002e1d
 8002de0:	08002e1d 	.word	0x08002e1d
 8002de4:	08002e1d 	.word	0x08002e1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dec:	3308      	adds	r3, #8
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 ff71 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dfc:	e00f      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e02:	3328      	adds	r3, #40	; 0x28
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f818 	bl	8003e3c <RCCEx_PLL3_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e12:	e004      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e26:	4b96      	ldr	r3, [pc, #600]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f023 0107 	bic.w	r1, r3, #7
 8002e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e36:	4a92      	ldr	r2, [pc, #584]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6553      	str	r3, [r2, #84]	; 0x54
 8002e3c:	e003      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f002 0304 	and.w	r3, r2, #4
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e5c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4313      	orrs	r3, r2
 8002e64:	d043      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d824      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ec5 	.word	0x08002ec5
 8002e7c:	08002e91 	.word	0x08002e91
 8002e80:	08002ea7 	.word	0x08002ea7
 8002e84:	08002ec5 	.word	0x08002ec5
 8002e88:	08002ec5 	.word	0x08002ec5
 8002e8c:	08002ec5 	.word	0x08002ec5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e94:	3308      	adds	r3, #8
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 ff1d 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e00f      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eaa:	3328      	adds	r3, #40	; 0x28
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 ffc4 	bl	8003e3c <RCCEx_PLL3_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002eba:	e004      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ece:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f023 0107 	bic.w	r1, r3, #7
 8002ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ede:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee4:	e003      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f002 0320 	and.w	r3, r2, #32
 8002efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	d055      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1a:	d033      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f20:	d82c      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d02f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d826      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f32:	d02b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002f34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f38:	d820      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3e:	d012      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f44:	d81a      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d022      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f4e:	d115      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f54:	3308      	adds	r3, #8
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 febd 	bl	8003cd8 <RCCEx_PLL2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f64:	e015      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	3328      	adds	r3, #40	; 0x28
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 ff64 	bl	8003e3c <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6553      	str	r3, [r2, #84]	; 0x54
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fb6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002fd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	d058      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fe2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fe6:	d033      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002fe8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fec:	d82c      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d02f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff8:	d826      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ffe:	d02b      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003004:	d820      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300a:	d012      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003010:	d81a      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d022      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d115      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800301c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003020:	3308      	adds	r3, #8
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fe57 	bl	8003cd8 <RCCEx_PLL2_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003030:	e015      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003036:	3328      	adds	r3, #40	; 0x28
 8003038:	2102      	movs	r1, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fefe 	bl	8003e3c <RCCEx_PLL3_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003046:	e00a      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800304e:	e006      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003050:	bf00      	nop
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003054:	bf00      	nop
 8003056:	e002      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800305c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10e      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003076:	4a02      	ldr	r2, [pc, #8]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003078:	430b      	orrs	r3, r1
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
 800307c:	e006      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800307e:	bf00      	nop
 8003080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003088:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800308c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80030a6:	460b      	mov	r3, r1
 80030a8:	4313      	orrs	r3, r2
 80030aa:	d055      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80030ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030b8:	d033      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80030ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030be:	d82c      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c4:	d02f      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80030c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ca:	d826      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030d0:	d02b      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80030d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030d6:	d820      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030dc:	d012      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80030de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e2:	d81a      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d022      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d115      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f2:	3308      	adds	r3, #8
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fdee 	bl	8003cd8 <RCCEx_PLL2_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003102:	e015      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003108:	3328      	adds	r3, #40	; 0x28
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fe95 	bl	8003e3c <RCCEx_PLL3_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003118:	e00a      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003120:	e006      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003122:	bf00      	nop
 8003124:	e004      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800312e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003138:	4ba1      	ldr	r3, [pc, #644]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003148:	4a9d      	ldr	r2, [pc, #628]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800314a:	430b      	orrs	r3, r1
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
 800314e:	e003      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003154:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f002 0308 	and.w	r3, r2, #8
 8003164:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800316e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003172:	460b      	mov	r3, r1
 8003174:	4313      	orrs	r3, r2
 8003176:	d01e      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318a:	3328      	adds	r3, #40	; 0x28
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fe54 	bl	8003e3c <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031a0:	4b87      	ldr	r3, [pc, #540]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b0:	4a83      	ldr	r2, [pc, #524]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f002 0310 	and.w	r3, r2, #16
 80031c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80031cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80031d0:	460b      	mov	r3, r1
 80031d2:	4313      	orrs	r3, r2
 80031d4:	d01e      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e2:	d10c      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e8:	3328      	adds	r3, #40	; 0x28
 80031ea:	2102      	movs	r1, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fe25 	bl	8003e3c <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031fe:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800320e:	4a6c      	ldr	r2, [pc, #432]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003210:	430b      	orrs	r3, r1
 8003212:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800322a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d03e      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003238:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800323c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003240:	d022      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003246:	d81b      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d00b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003252:	e015      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003258:	3308      	adds	r3, #8
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fd3b 	bl	8003cd8 <RCCEx_PLL2_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003268:	e00f      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800326a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326e:	3328      	adds	r3, #40	; 0x28
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fde2 	bl	8003e3c <RCCEx_PLL3_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800327e:	e004      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10b      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003292:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800329a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032a2:	4a47      	ldr	r2, [pc, #284]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6593      	str	r3, [r2, #88]	; 0x58
 80032a8:	e003      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80032be:	67bb      	str	r3, [r7, #120]	; 0x78
 80032c0:	2300      	movs	r3, #0
 80032c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80032c8:	460b      	mov	r3, r1
 80032ca:	4313      	orrs	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80032ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032da:	d01f      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80032dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e0:	d818      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80032e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e6:	d003      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80032e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ec:	d007      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80032ee:	e011      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032fc:	e00f      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003302:	3328      	adds	r3, #40	; 0x28
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fd98 	bl	8003e3c <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003312:	e004      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800331c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800332e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003338:	430b      	orrs	r3, r1
 800333a:	6553      	str	r3, [r2, #84]	; 0x54
 800333c:	e003      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003342:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003352:	673b      	str	r3, [r7, #112]	; 0x70
 8003354:	2300      	movs	r3, #0
 8003356:	677b      	str	r3, [r7, #116]	; 0x74
 8003358:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800335c:	460b      	mov	r3, r1
 800335e:	4313      	orrs	r3, r2
 8003360:	d034      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d007      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003372:	e011      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003380:	e00e      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003386:	3308      	adds	r3, #8
 8003388:	2102      	movs	r1, #2
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fca4 	bl	8003cd8 <RCCEx_PLL2_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800339e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b6:	4a02      	ldr	r2, [pc, #8]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033bc:	e006      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80033be:	bf00      	nop
 80033c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033da:	2300      	movs	r3, #0
 80033dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d00c      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ec:	3328      	adds	r3, #40	; 0x28
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fd23 	bl	8003e3c <RCCEx_PLL3_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800340e:	663b      	str	r3, [r7, #96]	; 0x60
 8003410:	2300      	movs	r3, #0
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
 8003414:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d038      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800341e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800342a:	d018      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800342c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003430:	d811      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d014      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d80b      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003446:	d106      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003448:	4bc3      	ldr	r3, [pc, #780]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	4ac2      	ldr	r2, [pc, #776]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800344e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003454:	e008      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800345c:	e004      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003470:	4bb9      	ldr	r3, [pc, #740]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	4ab5      	ldr	r2, [pc, #724]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003482:	430b      	orrs	r3, r1
 8003484:	6553      	str	r3, [r2, #84]	; 0x54
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800348c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800349c:	65bb      	str	r3, [r7, #88]	; 0x58
 800349e:	2300      	movs	r3, #0
 80034a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034ac:	4baa      	ldr	r3, [pc, #680]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ba:	4aa7      	ldr	r2, [pc, #668]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80034cc:	653b      	str	r3, [r7, #80]	; 0x50
 80034ce:	2300      	movs	r3, #0
 80034d0:	657b      	str	r3, [r7, #84]	; 0x54
 80034d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034dc:	4b9e      	ldr	r3, [pc, #632]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80034e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a9b      	ldr	r2, [pc, #620]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fe:	2300      	movs	r3, #0
 8003500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003502:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003506:	460b      	mov	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800350c:	4b92      	ldr	r3, [pc, #584]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351a:	4a8f      	ldr	r2, [pc, #572]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800352c:	643b      	str	r3, [r7, #64]	; 0x40
 800352e:	2300      	movs	r3, #0
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
 8003532:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800353c:	4b86      	ldr	r3, [pc, #536]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4a85      	ldr	r2, [pc, #532]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003542:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003546:	6113      	str	r3, [r2, #16]
 8003548:	4b83      	ldr	r3, [pc, #524]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800354a:	6919      	ldr	r1, [r3, #16]
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003554:	4a80      	ldr	r2, [pc, #512]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003556:	430b      	orrs	r3, r1
 8003558:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003576:	4b78      	ldr	r3, [pc, #480]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800357e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	4a74      	ldr	r2, [pc, #464]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003586:	430b      	orrs	r3, r1
 8003588:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 800359c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035a0:	460b      	mov	r3, r1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035a6:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80035ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	2100      	movs	r1, #0
 80035c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d011      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035dc:	3308      	adds	r3, #8
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fb79 	bl	8003cd8 <RCCEx_PLL2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	2100      	movs	r1, #0
 8003606:	6239      	str	r1, [r7, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003612:	460b      	mov	r3, r1
 8003614:	4313      	orrs	r3, r2
 8003616:	d011      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	3308      	adds	r3, #8
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fb59 	bl	8003cd8 <RCCEx_PLL2_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800362c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003638:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800363c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	2100      	movs	r1, #0
 8003646:	61b9      	str	r1, [r7, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003652:	460b      	mov	r3, r1
 8003654:	4313      	orrs	r3, r2
 8003656:	d011      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365c:	3308      	adds	r3, #8
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fb39 	bl	8003cd8 <RCCEx_PLL2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800366c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003678:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	2100      	movs	r1, #0
 8003686:	6139      	str	r1, [r7, #16]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d011      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369c:	3328      	adds	r3, #40	; 0x28
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fbcb 	bl	8003e3c <RCCEx_PLL3_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80036ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	2100      	movs	r1, #0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d011      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036dc:	3328      	adds	r3, #40	; 0x28
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fbab 	bl	8003e3c <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	2100      	movs	r1, #0
 8003706:	6039      	str	r1, [r7, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d011      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371c:	3328      	adds	r3, #40	; 0x28
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fb8b 	bl	8003e3c <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800372c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003738:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800373c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
}
 800374a:	4618      	mov	r0, r3
 800374c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400

0800375c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003760:	f7fe fde2 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	58024400 	.word	0x58024400
 8003784:	080053c4 	.word	0x080053c4

08003788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003790:	4ba1      	ldr	r3, [pc, #644]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800379a:	4b9f      	ldr	r3, [pc, #636]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	0b1b      	lsrs	r3, r3, #12
 80037a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037a6:	4b9c      	ldr	r3, [pc, #624]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80037b2:	4b99      	ldr	r3, [pc, #612]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8111 	beq.w	80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f000 8083 	beq.w	80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f200 80a1 	bhi.w	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d056      	beq.n	80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037f2:	e099      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02d      	beq.n	800385c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003800:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	4a84      	ldr	r2, [pc, #528]	; (8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b7b      	ldr	r3, [pc, #492]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a03 	vldr	s12, [r7, #12]
 800383e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800385a:	e087      	b.n	800396c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003882:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389e:	e065      	b.n	800396c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038e2:	e043      	b.n	800396c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a03 	vldr	s12, [r7, #12]
 800390a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003926:	e021      	b.n	800396c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394a:	ed97 6a03 	vldr	s12, [r7, #12]
 800394e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800396a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800396c:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	0a5b      	lsrs	r3, r3, #9
 8003972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003986:	edd7 6a07 	vldr	s13, [r7, #28]
 800398a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003992:	ee17 2a90 	vmov	r2, s15
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c0:	ee17 2a90 	vmov	r2, s15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ee:	ee17 2a90 	vmov	r2, s15
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039f6:	e008      	b.n	8003a0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	03d09000 	.word	0x03d09000
 8003a20:	46000000 	.word	0x46000000
 8003a24:	4c742400 	.word	0x4c742400
 8003a28:	4a742400 	.word	0x4a742400
 8003a2c:	4af42400 	.word	0x4af42400

08003a30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a38:	4ba1      	ldr	r3, [pc, #644]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a42:	4b9f      	ldr	r3, [pc, #636]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	0d1b      	lsrs	r3, r3, #20
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a4e:	4b9c      	ldr	r3, [pc, #624]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a5a:	4b99      	ldr	r3, [pc, #612]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	08db      	lsrs	r3, r3, #3
 8003a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8111 	beq.w	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	f000 8083 	beq.w	8003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	f200 80a1 	bhi.w	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d056      	beq.n	8003b48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a9a:	e099      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a9c:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02d      	beq.n	8003b04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003aa8:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	4a84      	ldr	r2, [pc, #528]	; (8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b02:	e087      	b.n	8003c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b46:	e065      	b.n	8003c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b8a:	e043      	b.n	8003c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9e:	4b48      	ldr	r3, [pc, #288]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bce:	e021      	b.n	8003c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be2:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	0a5b      	lsrs	r3, r3, #9
 8003c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3a:	ee17 2a90 	vmov	r2, s15
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c68:	ee17 2a90 	vmov	r2, s15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	0e1b      	lsrs	r3, r3, #24
 8003c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c96:	ee17 2a90 	vmov	r2, s15
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	03d09000 	.word	0x03d09000
 8003cc8:	46000000 	.word	0x46000000
 8003ccc:	4c742400 	.word	0x4c742400
 8003cd0:	4a742400 	.word	0x4a742400
 8003cd4:	4af42400 	.word	0x4af42400

08003cd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d101      	bne.n	8003cf6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e099      	b.n	8003e2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cf6:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003cfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d02:	f7fd f85d 	bl	8000dc0 <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d0a:	f7fd f859 	bl	8000dc0 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e086      	b.n	8003e2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d1c:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d28:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	031b      	lsls	r3, r3, #12
 8003d36:	493f      	ldr	r1, [pc, #252]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	025b      	lsls	r3, r3, #9
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d6c:	4931      	ldr	r1, [pc, #196]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f023 0220 	bic.w	r2, r3, #32
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4928      	ldr	r1, [pc, #160]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <RCCEx_PLL2_Config+0x160>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	69d2      	ldr	r2, [r2, #28]
 8003dae:	00d2      	lsls	r2, r2, #3
 8003db0:	4920      	ldr	r1, [pc, #128]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	f043 0310 	orr.w	r3, r3, #16
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd4:	e00f      	b.n	8003df6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de8:	e005      	b.n	8003df6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003df4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e02:	f7fc ffdd 	bl	8000dc0 <HAL_GetTick>
 8003e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e08:	e008      	b.n	8003e1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e0a:	f7fc ffd9 	bl	8000dc0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e006      	b.n	8003e2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <RCCEx_PLL2_Config+0x15c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	58024400 	.word	0x58024400
 8003e38:	ffff0007 	.word	0xffff0007

08003e3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e4a:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d101      	bne.n	8003e5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e099      	b.n	8003f8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e5a:	4b4f      	ldr	r3, [pc, #316]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e66:	f7fc ffab 	bl	8000dc0 <HAL_GetTick>
 8003e6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e6e:	f7fc ffa7 	bl	8000dc0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e086      	b.n	8003f8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e80:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	051b      	lsls	r3, r3, #20
 8003e9a:	493f      	ldr	r1, [pc, #252]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	025b      	lsls	r3, r3, #9
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed0:	4931      	ldr	r1, [pc, #196]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	492d      	ldr	r1, [pc, #180]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	4928      	ldr	r1, [pc, #160]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003efa:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <RCCEx_PLL3_Config+0x160>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	69d2      	ldr	r2, [r2, #28]
 8003f12:	00d2      	lsls	r2, r2, #3
 8003f14:	4920      	ldr	r1, [pc, #128]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f38:	e00f      	b.n	8003f5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f4c:	e005      	b.n	8003f5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f66:	f7fc ff2b 	bl	8000dc0 <HAL_GetTick>
 8003f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f6c:	e008      	b.n	8003f80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f6e:	f7fc ff27 	bl	8000dc0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e006      	b.n	8003f8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <RCCEx_PLL3_Config+0x15c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	58024400 	.word	0x58024400
 8003f9c:	ffff0007 	.word	0xffff0007

08003fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e042      	b.n	8004038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fc fd3f 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f82c 	bl	8004040 <UART_SetConfig>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e022      	b.n	8004038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fe8c 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800400e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800401e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 ff13 	bl	8004e5c <UART_CheckIdleState>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b092      	sub	sp, #72	; 0x48
 8004046:	af00      	add	r7, sp, #0
 8004048:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	431a      	orrs	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4313      	orrs	r3, r2
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4bbe      	ldr	r3, [pc, #760]	; (8004368 <UART_SetConfig+0x328>)
 8004070:	4013      	ands	r3, r2
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004078:	430b      	orrs	r3, r1
 800407a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4ab3      	ldr	r2, [pc, #716]	; (800436c <UART_SetConfig+0x32c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a8:	4313      	orrs	r3, r2
 80040aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	4baf      	ldr	r3, [pc, #700]	; (8004370 <UART_SetConfig+0x330>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040bc:	430b      	orrs	r3, r1
 80040be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f023 010f 	bic.w	r1, r3, #15
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4aa6      	ldr	r2, [pc, #664]	; (8004374 <UART_SetConfig+0x334>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d177      	bne.n	80041d0 <UART_SetConfig+0x190>
 80040e0:	4ba5      	ldr	r3, [pc, #660]	; (8004378 <UART_SetConfig+0x338>)
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e8:	2b28      	cmp	r3, #40	; 0x28
 80040ea:	d86d      	bhi.n	80041c8 <UART_SetConfig+0x188>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0xb4>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004199 	.word	0x08004199
 80040f8:	080041c9 	.word	0x080041c9
 80040fc:	080041c9 	.word	0x080041c9
 8004100:	080041c9 	.word	0x080041c9
 8004104:	080041c9 	.word	0x080041c9
 8004108:	080041c9 	.word	0x080041c9
 800410c:	080041c9 	.word	0x080041c9
 8004110:	080041c9 	.word	0x080041c9
 8004114:	080041a1 	.word	0x080041a1
 8004118:	080041c9 	.word	0x080041c9
 800411c:	080041c9 	.word	0x080041c9
 8004120:	080041c9 	.word	0x080041c9
 8004124:	080041c9 	.word	0x080041c9
 8004128:	080041c9 	.word	0x080041c9
 800412c:	080041c9 	.word	0x080041c9
 8004130:	080041c9 	.word	0x080041c9
 8004134:	080041a9 	.word	0x080041a9
 8004138:	080041c9 	.word	0x080041c9
 800413c:	080041c9 	.word	0x080041c9
 8004140:	080041c9 	.word	0x080041c9
 8004144:	080041c9 	.word	0x080041c9
 8004148:	080041c9 	.word	0x080041c9
 800414c:	080041c9 	.word	0x080041c9
 8004150:	080041c9 	.word	0x080041c9
 8004154:	080041b1 	.word	0x080041b1
 8004158:	080041c9 	.word	0x080041c9
 800415c:	080041c9 	.word	0x080041c9
 8004160:	080041c9 	.word	0x080041c9
 8004164:	080041c9 	.word	0x080041c9
 8004168:	080041c9 	.word	0x080041c9
 800416c:	080041c9 	.word	0x080041c9
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041b9 	.word	0x080041b9
 8004178:	080041c9 	.word	0x080041c9
 800417c:	080041c9 	.word	0x080041c9
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041c9 	.word	0x080041c9
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041c1 	.word	0x080041c1
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419e:	e326      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a6:	e322      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ae:	e31e      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b6:	e31a      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041b8:	2320      	movs	r3, #32
 80041ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041be:	e316      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041c0:	2340      	movs	r3, #64	; 0x40
 80041c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c6:	e312      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e30e      	b.n	80047ee <UART_SetConfig+0x7ae>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a69      	ldr	r2, [pc, #420]	; (800437c <UART_SetConfig+0x33c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d130      	bne.n	800423c <UART_SetConfig+0x1fc>
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <UART_SetConfig+0x338>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d826      	bhi.n	8004234 <UART_SetConfig+0x1f4>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x1ac>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004205 	.word	0x08004205
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004215 	.word	0x08004215
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800422d 	.word	0x0800422d
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420a:	e2f0      	b.n	80047ee <UART_SetConfig+0x7ae>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004212:	e2ec      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421a:	e2e8      	b.n	80047ee <UART_SetConfig+0x7ae>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004222:	e2e4      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004224:	2320      	movs	r3, #32
 8004226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422a:	e2e0      	b.n	80047ee <UART_SetConfig+0x7ae>
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004232:	e2dc      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e2d8      	b.n	80047ee <UART_SetConfig+0x7ae>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4f      	ldr	r2, [pc, #316]	; (8004380 <UART_SetConfig+0x340>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d130      	bne.n	80042a8 <UART_SetConfig+0x268>
 8004246:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <UART_SetConfig+0x338>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b05      	cmp	r3, #5
 8004250:	d826      	bhi.n	80042a0 <UART_SetConfig+0x260>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x218>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004271 	.word	0x08004271
 800425c:	08004279 	.word	0x08004279
 8004260:	08004281 	.word	0x08004281
 8004264:	08004289 	.word	0x08004289
 8004268:	08004291 	.word	0x08004291
 800426c:	08004299 	.word	0x08004299
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004276:	e2ba      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800427e:	e2b6      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004286:	e2b2      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428e:	e2ae      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004290:	2320      	movs	r3, #32
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004296:	e2aa      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004298:	2340      	movs	r3, #64	; 0x40
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e2a6      	b.n	80047ee <UART_SetConfig+0x7ae>
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e2a2      	b.n	80047ee <UART_SetConfig+0x7ae>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <UART_SetConfig+0x344>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d130      	bne.n	8004314 <UART_SetConfig+0x2d4>
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <UART_SetConfig+0x338>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d826      	bhi.n	800430c <UART_SetConfig+0x2cc>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x284>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042dd 	.word	0x080042dd
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	080042ed 	.word	0x080042ed
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	080042fd 	.word	0x080042fd
 80042d8:	08004305 	.word	0x08004305
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e2:	e284      	b.n	80047ee <UART_SetConfig+0x7ae>
 80042e4:	2304      	movs	r3, #4
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e280      	b.n	80047ee <UART_SetConfig+0x7ae>
 80042ec:	2308      	movs	r3, #8
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e27c      	b.n	80047ee <UART_SetConfig+0x7ae>
 80042f4:	2310      	movs	r3, #16
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e278      	b.n	80047ee <UART_SetConfig+0x7ae>
 80042fc:	2320      	movs	r3, #32
 80042fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004302:	e274      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430a:	e270      	b.n	80047ee <UART_SetConfig+0x7ae>
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e26c      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <UART_SetConfig+0x348>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d142      	bne.n	80043a4 <UART_SetConfig+0x364>
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <UART_SetConfig+0x338>)
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	2b05      	cmp	r3, #5
 8004328:	d838      	bhi.n	800439c <UART_SetConfig+0x35c>
 800432a:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x2f0>)
 800432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004330:	08004349 	.word	0x08004349
 8004334:	08004351 	.word	0x08004351
 8004338:	08004359 	.word	0x08004359
 800433c:	08004361 	.word	0x08004361
 8004340:	0800438d 	.word	0x0800438d
 8004344:	08004395 	.word	0x08004395
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434e:	e24e      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e24a      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e246      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e242      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004368:	cfff69f3 	.word	0xcfff69f3
 800436c:	58000c00 	.word	0x58000c00
 8004370:	11fff4ff 	.word	0x11fff4ff
 8004374:	40011000 	.word	0x40011000
 8004378:	58024400 	.word	0x58024400
 800437c:	40004400 	.word	0x40004400
 8004380:	40004800 	.word	0x40004800
 8004384:	40004c00 	.word	0x40004c00
 8004388:	40005000 	.word	0x40005000
 800438c:	2320      	movs	r3, #32
 800438e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004392:	e22c      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004394:	2340      	movs	r3, #64	; 0x40
 8004396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800439a:	e228      	b.n	80047ee <UART_SetConfig+0x7ae>
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043a2:	e224      	b.n	80047ee <UART_SetConfig+0x7ae>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4ab1      	ldr	r2, [pc, #708]	; (8004670 <UART_SetConfig+0x630>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d176      	bne.n	800449c <UART_SetConfig+0x45c>
 80043ae:	4bb1      	ldr	r3, [pc, #708]	; (8004674 <UART_SetConfig+0x634>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b6:	2b28      	cmp	r3, #40	; 0x28
 80043b8:	d86c      	bhi.n	8004494 <UART_SetConfig+0x454>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x380>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	08004465 	.word	0x08004465
 80043c4:	08004495 	.word	0x08004495
 80043c8:	08004495 	.word	0x08004495
 80043cc:	08004495 	.word	0x08004495
 80043d0:	08004495 	.word	0x08004495
 80043d4:	08004495 	.word	0x08004495
 80043d8:	08004495 	.word	0x08004495
 80043dc:	08004495 	.word	0x08004495
 80043e0:	0800446d 	.word	0x0800446d
 80043e4:	08004495 	.word	0x08004495
 80043e8:	08004495 	.word	0x08004495
 80043ec:	08004495 	.word	0x08004495
 80043f0:	08004495 	.word	0x08004495
 80043f4:	08004495 	.word	0x08004495
 80043f8:	08004495 	.word	0x08004495
 80043fc:	08004495 	.word	0x08004495
 8004400:	08004475 	.word	0x08004475
 8004404:	08004495 	.word	0x08004495
 8004408:	08004495 	.word	0x08004495
 800440c:	08004495 	.word	0x08004495
 8004410:	08004495 	.word	0x08004495
 8004414:	08004495 	.word	0x08004495
 8004418:	08004495 	.word	0x08004495
 800441c:	08004495 	.word	0x08004495
 8004420:	0800447d 	.word	0x0800447d
 8004424:	08004495 	.word	0x08004495
 8004428:	08004495 	.word	0x08004495
 800442c:	08004495 	.word	0x08004495
 8004430:	08004495 	.word	0x08004495
 8004434:	08004495 	.word	0x08004495
 8004438:	08004495 	.word	0x08004495
 800443c:	08004495 	.word	0x08004495
 8004440:	08004485 	.word	0x08004485
 8004444:	08004495 	.word	0x08004495
 8004448:	08004495 	.word	0x08004495
 800444c:	08004495 	.word	0x08004495
 8004450:	08004495 	.word	0x08004495
 8004454:	08004495 	.word	0x08004495
 8004458:	08004495 	.word	0x08004495
 800445c:	08004495 	.word	0x08004495
 8004460:	0800448d 	.word	0x0800448d
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446a:	e1c0      	b.n	80047ee <UART_SetConfig+0x7ae>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004472:	e1bc      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447a:	e1b8      	b.n	80047ee <UART_SetConfig+0x7ae>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004482:	e1b4      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004484:	2320      	movs	r3, #32
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448a:	e1b0      	b.n	80047ee <UART_SetConfig+0x7ae>
 800448c:	2340      	movs	r3, #64	; 0x40
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004492:	e1ac      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e1a8      	b.n	80047ee <UART_SetConfig+0x7ae>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a75      	ldr	r2, [pc, #468]	; (8004678 <UART_SetConfig+0x638>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d130      	bne.n	8004508 <UART_SetConfig+0x4c8>
 80044a6:	4b73      	ldr	r3, [pc, #460]	; (8004674 <UART_SetConfig+0x634>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d826      	bhi.n	8004500 <UART_SetConfig+0x4c0>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x478>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044d9 	.word	0x080044d9
 80044c0:	080044e1 	.word	0x080044e1
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d6:	e18a      	b.n	80047ee <UART_SetConfig+0x7ae>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044de:	e186      	b.n	80047ee <UART_SetConfig+0x7ae>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e6:	e182      	b.n	80047ee <UART_SetConfig+0x7ae>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ee:	e17e      	b.n	80047ee <UART_SetConfig+0x7ae>
 80044f0:	2320      	movs	r3, #32
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f6:	e17a      	b.n	80047ee <UART_SetConfig+0x7ae>
 80044f8:	2340      	movs	r3, #64	; 0x40
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fe:	e176      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004506:	e172      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a5b      	ldr	r2, [pc, #364]	; (800467c <UART_SetConfig+0x63c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d130      	bne.n	8004574 <UART_SetConfig+0x534>
 8004512:	4b58      	ldr	r3, [pc, #352]	; (8004674 <UART_SetConfig+0x634>)
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	2b05      	cmp	r3, #5
 800451c:	d826      	bhi.n	800456c <UART_SetConfig+0x52c>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x4e4>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	0800453d 	.word	0x0800453d
 8004528:	08004545 	.word	0x08004545
 800452c:	0800454d 	.word	0x0800454d
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e154      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e150      	b.n	80047ee <UART_SetConfig+0x7ae>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e14c      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455a:	e148      	b.n	80047ee <UART_SetConfig+0x7ae>
 800455c:	2320      	movs	r3, #32
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004562:	e144      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004564:	2340      	movs	r3, #64	; 0x40
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456a:	e140      	b.n	80047ee <UART_SetConfig+0x7ae>
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004572:	e13c      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a41      	ldr	r2, [pc, #260]	; (8004680 <UART_SetConfig+0x640>)
 800457a:	4293      	cmp	r3, r2
 800457c:	f040 8082 	bne.w	8004684 <UART_SetConfig+0x644>
 8004580:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <UART_SetConfig+0x634>)
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004588:	2b28      	cmp	r3, #40	; 0x28
 800458a:	d86d      	bhi.n	8004668 <UART_SetConfig+0x628>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x554>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	08004639 	.word	0x08004639
 8004598:	08004669 	.word	0x08004669
 800459c:	08004669 	.word	0x08004669
 80045a0:	08004669 	.word	0x08004669
 80045a4:	08004669 	.word	0x08004669
 80045a8:	08004669 	.word	0x08004669
 80045ac:	08004669 	.word	0x08004669
 80045b0:	08004669 	.word	0x08004669
 80045b4:	08004641 	.word	0x08004641
 80045b8:	08004669 	.word	0x08004669
 80045bc:	08004669 	.word	0x08004669
 80045c0:	08004669 	.word	0x08004669
 80045c4:	08004669 	.word	0x08004669
 80045c8:	08004669 	.word	0x08004669
 80045cc:	08004669 	.word	0x08004669
 80045d0:	08004669 	.word	0x08004669
 80045d4:	08004649 	.word	0x08004649
 80045d8:	08004669 	.word	0x08004669
 80045dc:	08004669 	.word	0x08004669
 80045e0:	08004669 	.word	0x08004669
 80045e4:	08004669 	.word	0x08004669
 80045e8:	08004669 	.word	0x08004669
 80045ec:	08004669 	.word	0x08004669
 80045f0:	08004669 	.word	0x08004669
 80045f4:	08004651 	.word	0x08004651
 80045f8:	08004669 	.word	0x08004669
 80045fc:	08004669 	.word	0x08004669
 8004600:	08004669 	.word	0x08004669
 8004604:	08004669 	.word	0x08004669
 8004608:	08004669 	.word	0x08004669
 800460c:	08004669 	.word	0x08004669
 8004610:	08004669 	.word	0x08004669
 8004614:	08004659 	.word	0x08004659
 8004618:	08004669 	.word	0x08004669
 800461c:	08004669 	.word	0x08004669
 8004620:	08004669 	.word	0x08004669
 8004624:	08004669 	.word	0x08004669
 8004628:	08004669 	.word	0x08004669
 800462c:	08004669 	.word	0x08004669
 8004630:	08004669 	.word	0x08004669
 8004634:	08004661 	.word	0x08004661
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e0d6      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e0d2      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464e:	e0ce      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004656:	e0ca      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004658:	2320      	movs	r3, #32
 800465a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465e:	e0c6      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004660:	2340      	movs	r3, #64	; 0x40
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004666:	e0c2      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466e:	e0be      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004670:	40011400 	.word	0x40011400
 8004674:	58024400 	.word	0x58024400
 8004678:	40007800 	.word	0x40007800
 800467c:	40007c00 	.word	0x40007c00
 8004680:	40011800 	.word	0x40011800
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4aad      	ldr	r2, [pc, #692]	; (8004940 <UART_SetConfig+0x900>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d176      	bne.n	800477c <UART_SetConfig+0x73c>
 800468e:	4bad      	ldr	r3, [pc, #692]	; (8004944 <UART_SetConfig+0x904>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004696:	2b28      	cmp	r3, #40	; 0x28
 8004698:	d86c      	bhi.n	8004774 <UART_SetConfig+0x734>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x660>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	08004745 	.word	0x08004745
 80046a4:	08004775 	.word	0x08004775
 80046a8:	08004775 	.word	0x08004775
 80046ac:	08004775 	.word	0x08004775
 80046b0:	08004775 	.word	0x08004775
 80046b4:	08004775 	.word	0x08004775
 80046b8:	08004775 	.word	0x08004775
 80046bc:	08004775 	.word	0x08004775
 80046c0:	0800474d 	.word	0x0800474d
 80046c4:	08004775 	.word	0x08004775
 80046c8:	08004775 	.word	0x08004775
 80046cc:	08004775 	.word	0x08004775
 80046d0:	08004775 	.word	0x08004775
 80046d4:	08004775 	.word	0x08004775
 80046d8:	08004775 	.word	0x08004775
 80046dc:	08004775 	.word	0x08004775
 80046e0:	08004755 	.word	0x08004755
 80046e4:	08004775 	.word	0x08004775
 80046e8:	08004775 	.word	0x08004775
 80046ec:	08004775 	.word	0x08004775
 80046f0:	08004775 	.word	0x08004775
 80046f4:	08004775 	.word	0x08004775
 80046f8:	08004775 	.word	0x08004775
 80046fc:	08004775 	.word	0x08004775
 8004700:	0800475d 	.word	0x0800475d
 8004704:	08004775 	.word	0x08004775
 8004708:	08004775 	.word	0x08004775
 800470c:	08004775 	.word	0x08004775
 8004710:	08004775 	.word	0x08004775
 8004714:	08004775 	.word	0x08004775
 8004718:	08004775 	.word	0x08004775
 800471c:	08004775 	.word	0x08004775
 8004720:	08004765 	.word	0x08004765
 8004724:	08004775 	.word	0x08004775
 8004728:	08004775 	.word	0x08004775
 800472c:	08004775 	.word	0x08004775
 8004730:	08004775 	.word	0x08004775
 8004734:	08004775 	.word	0x08004775
 8004738:	08004775 	.word	0x08004775
 800473c:	08004775 	.word	0x08004775
 8004740:	0800476d 	.word	0x0800476d
 8004744:	2301      	movs	r3, #1
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e050      	b.n	80047ee <UART_SetConfig+0x7ae>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e04c      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e048      	b.n	80047ee <UART_SetConfig+0x7ae>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e044      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004764:	2320      	movs	r3, #32
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e040      	b.n	80047ee <UART_SetConfig+0x7ae>
 800476c:	2340      	movs	r3, #64	; 0x40
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e03c      	b.n	80047ee <UART_SetConfig+0x7ae>
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477a:	e038      	b.n	80047ee <UART_SetConfig+0x7ae>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a71      	ldr	r2, [pc, #452]	; (8004948 <UART_SetConfig+0x908>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d130      	bne.n	80047e8 <UART_SetConfig+0x7a8>
 8004786:	4b6f      	ldr	r3, [pc, #444]	; (8004944 <UART_SetConfig+0x904>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b05      	cmp	r3, #5
 8004790:	d826      	bhi.n	80047e0 <UART_SetConfig+0x7a0>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0x758>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047b1 	.word	0x080047b1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e01a      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e016      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e012      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e00e      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047d0:	2320      	movs	r3, #32
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e00a      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e006      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e002      	b.n	80047ee <UART_SetConfig+0x7ae>
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a55      	ldr	r2, [pc, #340]	; (8004948 <UART_SetConfig+0x908>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	f040 80f8 	bne.w	80049ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047fe:	2b20      	cmp	r3, #32
 8004800:	dc46      	bgt.n	8004890 <UART_SetConfig+0x850>
 8004802:	2b02      	cmp	r3, #2
 8004804:	db75      	blt.n	80048f2 <UART_SetConfig+0x8b2>
 8004806:	3b02      	subs	r3, #2
 8004808:	2b1e      	cmp	r3, #30
 800480a:	d872      	bhi.n	80048f2 <UART_SetConfig+0x8b2>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0x7d4>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004897 	.word	0x08004897
 8004818:	080048f3 	.word	0x080048f3
 800481c:	0800489f 	.word	0x0800489f
 8004820:	080048f3 	.word	0x080048f3
 8004824:	080048f3 	.word	0x080048f3
 8004828:	080048f3 	.word	0x080048f3
 800482c:	080048af 	.word	0x080048af
 8004830:	080048f3 	.word	0x080048f3
 8004834:	080048f3 	.word	0x080048f3
 8004838:	080048f3 	.word	0x080048f3
 800483c:	080048f3 	.word	0x080048f3
 8004840:	080048f3 	.word	0x080048f3
 8004844:	080048f3 	.word	0x080048f3
 8004848:	080048f3 	.word	0x080048f3
 800484c:	080048bf 	.word	0x080048bf
 8004850:	080048f3 	.word	0x080048f3
 8004854:	080048f3 	.word	0x080048f3
 8004858:	080048f3 	.word	0x080048f3
 800485c:	080048f3 	.word	0x080048f3
 8004860:	080048f3 	.word	0x080048f3
 8004864:	080048f3 	.word	0x080048f3
 8004868:	080048f3 	.word	0x080048f3
 800486c:	080048f3 	.word	0x080048f3
 8004870:	080048f3 	.word	0x080048f3
 8004874:	080048f3 	.word	0x080048f3
 8004878:	080048f3 	.word	0x080048f3
 800487c:	080048f3 	.word	0x080048f3
 8004880:	080048f3 	.word	0x080048f3
 8004884:	080048f3 	.word	0x080048f3
 8004888:	080048f3 	.word	0x080048f3
 800488c:	080048e5 	.word	0x080048e5
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d02a      	beq.n	80048ea <UART_SetConfig+0x8aa>
 8004894:	e02d      	b.n	80048f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004896:	f7fe ff61 	bl	800375c <HAL_RCCEx_GetD3PCLK1Freq>
 800489a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800489c:	e02f      	b.n	80048fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800489e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe ff70 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ac:	e027      	b.n	80048fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ae:	f107 0318 	add.w	r3, r7, #24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f8bc 	bl	8003a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048bc:	e01f      	b.n	80048fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <UART_SetConfig+0x904>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048ca:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <UART_SetConfig+0x904>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	08db      	lsrs	r3, r3, #3
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <UART_SetConfig+0x90c>)
 80048d6:	fa22 f303 	lsr.w	r3, r2, r3
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048dc:	e00f      	b.n	80048fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <UART_SetConfig+0x90c>)
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e2:	e00c      	b.n	80048fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <UART_SetConfig+0x910>)
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048f0:	e005      	b.n	80048fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80048fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 81ee 	beq.w	8004ce2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <UART_SetConfig+0x914>)
 800490c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004910:	461a      	mov	r2, r3
 8004912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004914:	fbb3 f3f2 	udiv	r3, r3, r2
 8004918:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4413      	add	r3, r2
 8004924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004926:	429a      	cmp	r2, r3
 8004928:	d305      	bcc.n	8004936 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800493c:	e1d1      	b.n	8004ce2 <UART_SetConfig+0xca2>
 800493e:	bf00      	nop
 8004940:	40011c00 	.word	0x40011c00
 8004944:	58024400 	.word	0x58024400
 8004948:	58000c00 	.word	0x58000c00
 800494c:	03d09000 	.word	0x03d09000
 8004950:	003d0900 	.word	0x003d0900
 8004954:	080053d4 	.word	0x080053d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495a:	2200      	movs	r2, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	4ac0      	ldr	r2, [pc, #768]	; (8004c68 <UART_SetConfig+0xc28>)
 8004966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496a:	b29b      	uxth	r3, r3
 800496c:	2200      	movs	r2, #0
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800497a:	f7fb fcb7 	bl	80002ec <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	020b      	lsls	r3, r1, #8
 8004990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004994:	0202      	lsls	r2, r0, #8
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	6849      	ldr	r1, [r1, #4]
 800499a:	0849      	lsrs	r1, r1, #1
 800499c:	2000      	movs	r0, #0
 800499e:	460c      	mov	r4, r1
 80049a0:	4605      	mov	r5, r0
 80049a2:	eb12 0804 	adds.w	r8, r2, r4
 80049a6:	eb43 0905 	adc.w	r9, r3, r5
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	469a      	mov	sl, r3
 80049b2:	4693      	mov	fp, r2
 80049b4:	4652      	mov	r2, sl
 80049b6:	465b      	mov	r3, fp
 80049b8:	4640      	mov	r0, r8
 80049ba:	4649      	mov	r1, r9
 80049bc:	f7fb fc96 	bl	80002ec <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ce:	d308      	bcc.n	80049e2 <UART_SetConfig+0x9a2>
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d6:	d204      	bcs.n	80049e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	60da      	str	r2, [r3, #12]
 80049e0:	e17f      	b.n	8004ce2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80049e8:	e17b      	b.n	8004ce2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f2:	f040 80bd 	bne.w	8004b70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80049f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	dc48      	bgt.n	8004a90 <UART_SetConfig+0xa50>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	db7b      	blt.n	8004afa <UART_SetConfig+0xaba>
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d879      	bhi.n	8004afa <UART_SetConfig+0xaba>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0x9cc>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a97 	.word	0x08004a97
 8004a10:	08004a9f 	.word	0x08004a9f
 8004a14:	08004afb 	.word	0x08004afb
 8004a18:	08004afb 	.word	0x08004afb
 8004a1c:	08004aa7 	.word	0x08004aa7
 8004a20:	08004afb 	.word	0x08004afb
 8004a24:	08004afb 	.word	0x08004afb
 8004a28:	08004afb 	.word	0x08004afb
 8004a2c:	08004ab7 	.word	0x08004ab7
 8004a30:	08004afb 	.word	0x08004afb
 8004a34:	08004afb 	.word	0x08004afb
 8004a38:	08004afb 	.word	0x08004afb
 8004a3c:	08004afb 	.word	0x08004afb
 8004a40:	08004afb 	.word	0x08004afb
 8004a44:	08004afb 	.word	0x08004afb
 8004a48:	08004afb 	.word	0x08004afb
 8004a4c:	08004ac7 	.word	0x08004ac7
 8004a50:	08004afb 	.word	0x08004afb
 8004a54:	08004afb 	.word	0x08004afb
 8004a58:	08004afb 	.word	0x08004afb
 8004a5c:	08004afb 	.word	0x08004afb
 8004a60:	08004afb 	.word	0x08004afb
 8004a64:	08004afb 	.word	0x08004afb
 8004a68:	08004afb 	.word	0x08004afb
 8004a6c:	08004afb 	.word	0x08004afb
 8004a70:	08004afb 	.word	0x08004afb
 8004a74:	08004afb 	.word	0x08004afb
 8004a78:	08004afb 	.word	0x08004afb
 8004a7c:	08004afb 	.word	0x08004afb
 8004a80:	08004afb 	.word	0x08004afb
 8004a84:	08004afb 	.word	0x08004afb
 8004a88:	08004afb 	.word	0x08004afb
 8004a8c:	08004aed 	.word	0x08004aed
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d02e      	beq.n	8004af2 <UART_SetConfig+0xab2>
 8004a94:	e031      	b.n	8004afa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a96:	f7fd fc77 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a9c:	e033      	b.n	8004b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a9e:	f7fd fc89 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8004aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004aa4:	e02f      	b.n	8004b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fe6c 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ab4:	e027      	b.n	8004b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ab6:	f107 0318 	add.w	r3, r7, #24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe ffb8 	bl	8003a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ac4:	e01f      	b.n	8004b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac6:	4b69      	ldr	r3, [pc, #420]	; (8004c6c <UART_SetConfig+0xc2c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ad2:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <UART_SetConfig+0xc2c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	08db      	lsrs	r3, r3, #3
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	4a64      	ldr	r2, [pc, #400]	; (8004c70 <UART_SetConfig+0xc30>)
 8004ade:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ae4:	e00f      	b.n	8004b06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004ae6:	4b62      	ldr	r3, [pc, #392]	; (8004c70 <UART_SetConfig+0xc30>)
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aea:	e00c      	b.n	8004b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <UART_SetConfig+0xc34>)
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80ea 	beq.w	8004ce2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	4a55      	ldr	r2, [pc, #340]	; (8004c68 <UART_SetConfig+0xc28>)
 8004b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	441a      	add	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d916      	bls.n	8004b68 <UART_SetConfig+0xb28>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d212      	bcs.n	8004b68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f023 030f 	bic.w	r3, r3, #15
 8004b4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e0bc      	b.n	8004ce2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b6e:	e0b8      	b.n	8004ce2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	dc4b      	bgt.n	8004c10 <UART_SetConfig+0xbd0>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f2c0 8087 	blt.w	8004c8c <UART_SetConfig+0xc4c>
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f200 8084 	bhi.w	8004c8c <UART_SetConfig+0xc4c>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0xb4c>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004c17 	.word	0x08004c17
 8004b90:	08004c1f 	.word	0x08004c1f
 8004b94:	08004c8d 	.word	0x08004c8d
 8004b98:	08004c8d 	.word	0x08004c8d
 8004b9c:	08004c27 	.word	0x08004c27
 8004ba0:	08004c8d 	.word	0x08004c8d
 8004ba4:	08004c8d 	.word	0x08004c8d
 8004ba8:	08004c8d 	.word	0x08004c8d
 8004bac:	08004c37 	.word	0x08004c37
 8004bb0:	08004c8d 	.word	0x08004c8d
 8004bb4:	08004c8d 	.word	0x08004c8d
 8004bb8:	08004c8d 	.word	0x08004c8d
 8004bbc:	08004c8d 	.word	0x08004c8d
 8004bc0:	08004c8d 	.word	0x08004c8d
 8004bc4:	08004c8d 	.word	0x08004c8d
 8004bc8:	08004c8d 	.word	0x08004c8d
 8004bcc:	08004c47 	.word	0x08004c47
 8004bd0:	08004c8d 	.word	0x08004c8d
 8004bd4:	08004c8d 	.word	0x08004c8d
 8004bd8:	08004c8d 	.word	0x08004c8d
 8004bdc:	08004c8d 	.word	0x08004c8d
 8004be0:	08004c8d 	.word	0x08004c8d
 8004be4:	08004c8d 	.word	0x08004c8d
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004c8d 	.word	0x08004c8d
 8004bf0:	08004c8d 	.word	0x08004c8d
 8004bf4:	08004c8d 	.word	0x08004c8d
 8004bf8:	08004c8d 	.word	0x08004c8d
 8004bfc:	08004c8d 	.word	0x08004c8d
 8004c00:	08004c8d 	.word	0x08004c8d
 8004c04:	08004c8d 	.word	0x08004c8d
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004c7f 	.word	0x08004c7f
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d037      	beq.n	8004c84 <UART_SetConfig+0xc44>
 8004c14:	e03a      	b.n	8004c8c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c16:	f7fd fbb7 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c1c:	e03c      	b.n	8004c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c1e:	f7fd fbc9 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8004c22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c24:	e038      	b.n	8004c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fdac 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c34:	e030      	b.n	8004c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c36:	f107 0318 	add.w	r3, r7, #24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fef8 	bl	8003a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c44:	e028      	b.n	8004c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <UART_SetConfig+0xc2c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d012      	beq.n	8004c78 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <UART_SetConfig+0xc2c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <UART_SetConfig+0xc30>)
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c64:	e018      	b.n	8004c98 <UART_SetConfig+0xc58>
 8004c66:	bf00      	nop
 8004c68:	080053d4 	.word	0x080053d4
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	03d09000 	.word	0x03d09000
 8004c74:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <UART_SetConfig+0xccc>)
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c7c:	e00c      	b.n	8004c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <UART_SetConfig+0xcd0>)
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c82:	e009      	b.n	8004c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c8a:	e005      	b.n	8004c98 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c96:	bf00      	nop
    }

    if (pclk != 0U)
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d021      	beq.n	8004ce2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <UART_SetConfig+0xcd4>)
 8004ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	441a      	add	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b0f      	cmp	r3, #15
 8004cc6:	d909      	bls.n	8004cdc <UART_SetConfig+0xc9c>
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cce:	d205      	bcs.n	8004cdc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	e002      	b.n	8004ce2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cfe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3748      	adds	r7, #72	; 0x48
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0c:	03d09000 	.word	0x03d09000
 8004d10:	003d0900 	.word	0x003d0900
 8004d14:	080053d4 	.word	0x080053d4

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d10a      	bne.n	8004e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b098      	sub	sp, #96	; 0x60
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e6c:	f7fb ffa8 	bl	8000dc0 <HAL_GetTick>
 8004e70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d12f      	bne.n	8004ee0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f88e 	bl	8004fb0 <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d022      	beq.n	8004ee0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eae:	653b      	str	r3, [r7, #80]	; 0x50
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e6      	bne.n	8004e9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e063      	b.n	8004fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d149      	bne.n	8004f82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f857 	bl	8004fb0 <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d03c      	beq.n	8004f82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	623b      	str	r3, [r7, #32]
   return(result);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
 8004f28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5a:	61fa      	str	r2, [r7, #28]
 8004f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69b9      	ldr	r1, [r7, #24]
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	617b      	str	r3, [r7, #20]
   return(result);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e012      	b.n	8004fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3758      	adds	r7, #88	; 0x58
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc0:	e049      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d045      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fca:	f7fb fef9 	bl	8000dc0 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d302      	bcc.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e048      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d031      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d110      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2208      	movs	r2, #8
 8005006:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f839 	bl	8005080 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2208      	movs	r2, #8
 8005012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e029      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005030:	d111      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f81f 	bl	8005080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e00f      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	429a      	cmp	r2, r3
 8005072:	d0a6      	beq.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b095      	sub	sp, #84	; 0x54
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40
 80050a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <UART_EndRxTransfer+0xc8>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d118      	bne.n	8005128 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60bb      	str	r3, [r7, #8]
   return(result);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6979      	ldr	r1, [r7, #20]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	613b      	str	r3, [r7, #16]
   return(result);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800513c:	bf00      	nop
 800513e:	3754      	adds	r7, #84	; 0x54
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	effffffe 	.word	0xeffffffe

0800514c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_UARTEx_DisableFifoMode+0x16>
 800515e:	2302      	movs	r3, #2
 8005160:	e027      	b.n	80051b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	; 0x24
 800516e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e02d      	b.n	8005232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2224      	movs	r2, #36	; 0x24
 80051e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f850 	bl	80052b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800524e:	2302      	movs	r3, #2
 8005250:	e02d      	b.n	80052ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2224      	movs	r2, #36	; 0x24
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f812 	bl	80052b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d108      	bne.n	80052da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052d8:	e031      	b.n	800533e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052da:	2310      	movs	r3, #16
 80052dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052de:	2310      	movs	r3, #16
 80052e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	0e5b      	lsrs	r3, r3, #25
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	0f5b      	lsrs	r3, r3, #29
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	7b3a      	ldrb	r2, [r7, #12]
 8005306:	4911      	ldr	r1, [pc, #68]	; (800534c <UARTEx_SetNbDataToProcess+0x94>)
 8005308:	5c8a      	ldrb	r2, [r1, r2]
 800530a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800530e:	7b3a      	ldrb	r2, [r7, #12]
 8005310:	490f      	ldr	r1, [pc, #60]	; (8005350 <UARTEx_SetNbDataToProcess+0x98>)
 8005312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005314:	fb93 f3f2 	sdiv	r3, r3, r2
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	7b7a      	ldrb	r2, [r7, #13]
 8005324:	4909      	ldr	r1, [pc, #36]	; (800534c <UARTEx_SetNbDataToProcess+0x94>)
 8005326:	5c8a      	ldrb	r2, [r1, r2]
 8005328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800532c:	7b7a      	ldrb	r2, [r7, #13]
 800532e:	4908      	ldr	r1, [pc, #32]	; (8005350 <UARTEx_SetNbDataToProcess+0x98>)
 8005330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005332:	fb93 f3f2 	sdiv	r3, r3, r2
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	080053ec 	.word	0x080053ec
 8005350:	080053f4 	.word	0x080053f4

08005354 <__libc_init_array>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4d0d      	ldr	r5, [pc, #52]	; (800538c <__libc_init_array+0x38>)
 8005358:	4c0d      	ldr	r4, [pc, #52]	; (8005390 <__libc_init_array+0x3c>)
 800535a:	1b64      	subs	r4, r4, r5
 800535c:	10a4      	asrs	r4, r4, #2
 800535e:	2600      	movs	r6, #0
 8005360:	42a6      	cmp	r6, r4
 8005362:	d109      	bne.n	8005378 <__libc_init_array+0x24>
 8005364:	4d0b      	ldr	r5, [pc, #44]	; (8005394 <__libc_init_array+0x40>)
 8005366:	4c0c      	ldr	r4, [pc, #48]	; (8005398 <__libc_init_array+0x44>)
 8005368:	f000 f820 	bl	80053ac <_init>
 800536c:	1b64      	subs	r4, r4, r5
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	2600      	movs	r6, #0
 8005372:	42a6      	cmp	r6, r4
 8005374:	d105      	bne.n	8005382 <__libc_init_array+0x2e>
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	f855 3b04 	ldr.w	r3, [r5], #4
 800537c:	4798      	blx	r3
 800537e:	3601      	adds	r6, #1
 8005380:	e7ee      	b.n	8005360 <__libc_init_array+0xc>
 8005382:	f855 3b04 	ldr.w	r3, [r5], #4
 8005386:	4798      	blx	r3
 8005388:	3601      	adds	r6, #1
 800538a:	e7f2      	b.n	8005372 <__libc_init_array+0x1e>
 800538c:	08005404 	.word	0x08005404
 8005390:	08005404 	.word	0x08005404
 8005394:	08005404 	.word	0x08005404
 8005398:	08005408 	.word	0x08005408

0800539c <memset>:
 800539c:	4402      	add	r2, r0
 800539e:	4603      	mov	r3, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <_init>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr

080053b8 <_fini>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr


Final_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002720  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028cc  080028cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028d4  080028d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080028e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080028e8  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c27f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f4  00000000  00000000  0002c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015618  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb63  00000000  00000000  00044840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892b5  00000000  00000000  000513a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003080  00000000  00000000  000da6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800289c 	.word	0x0800289c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800289c 	.word	0x0800289c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <USdetection_L>:
#include "stm32f4xx.h"

GPIO_PinState Pinstate;
int debut,fin;

void USdetection_L(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	//Impulsion de 10us envoyee par TRIG
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2102      	movs	r1, #2
 80004e2:	482a      	ldr	r0, [pc, #168]	; (800058c <USdetection_L+0xb4>)
 80004e4:	f000 ff26 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004e8:	200a      	movs	r0, #10
 80004ea:	f000 fc7d 	bl	8000de8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2102      	movs	r1, #2
 80004f2:	4826      	ldr	r0, [pc, #152]	; (800058c <USdetection_L+0xb4>)
 80004f4:	f000 ff1e 	bl	8001334 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fc75 	bl	8000de8 <HAL_Delay>

	//Reception de l'impulsion par ECHO
	Pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80004fe:	2101      	movs	r1, #1
 8000500:	4822      	ldr	r0, [pc, #136]	; (800058c <USdetection_L+0xb4>)
 8000502:	f000 feff 	bl	8001304 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <USdetection_L+0xb8>)
 800050c:	701a      	strb	r2, [r3, #0]

	//Test 1 : On eteint la LED lorsque que Echo detecte un front
	if(Pinstate == GPIO_PIN_RESET){
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <USdetection_L+0xb8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d105      	bne.n	8000522 <USdetection_L+0x4a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2120      	movs	r1, #32
 800051a:	481c      	ldr	r0, [pc, #112]	; (800058c <USdetection_L+0xb4>)
 800051c:	f000 ff0a 	bl	8001334 <HAL_GPIO_WritePin>
 8000520:	e004      	b.n	800052c <USdetection_L+0x54>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <USdetection_L+0xb4>)
 8000528:	f000 ff04 	bl	8001334 <HAL_GPIO_WritePin>

	}

	//On releve la duree du front montant
	debut = HAL_GetTick();
 800052c:	f000 fc50 	bl	8000dd0 <HAL_GetTick>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <USdetection_L+0xbc>)
 8000536:	601a      	str	r2, [r3, #0]

	//On releve le temps final tant que le ECHO est a l'etat haut
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000538:	e005      	b.n	8000546 <USdetection_L+0x6e>
		fin = HAL_GetTick();
 800053a:	f000 fc49 	bl	8000dd0 <HAL_GetTick>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <USdetection_L+0xc0>)
 8000544:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000546:	2101      	movs	r1, #1
 8000548:	4810      	ldr	r0, [pc, #64]	; (800058c <USdetection_L+0xb4>)
 800054a:	f000 fedb 	bl	8001304 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d0f2      	beq.n	800053a <USdetection_L+0x62>
	}

	//Duree inferieure a 1ms = assez proche du capteur -> clignotement de LED
	if (fin-debut < 1){
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <USdetection_L+0xc0>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <USdetection_L+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	dc0f      	bgt.n	8000582 <USdetection_L+0xaa>
		for(int i=0;i<9;i++){
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e009      	b.n	800057c <USdetection_L+0xa4>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000568:	2120      	movs	r1, #32
 800056a:	4808      	ldr	r0, [pc, #32]	; (800058c <USdetection_L+0xb4>)
 800056c:	f000 fefb 	bl	8001366 <HAL_GPIO_TogglePin>
			HAL_Delay(75);
 8000570:	204b      	movs	r0, #75	; 0x4b
 8000572:	f000 fc39 	bl	8000de8 <HAL_Delay>
		for(int i=0;i<9;i++){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3301      	adds	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b08      	cmp	r3, #8
 8000580:	ddf2      	ble.n	8000568 <USdetection_L+0x90>
	}

	//Attente avant re-detection
	//HAL_Delay(1000);

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020000 	.word	0x40020000
 8000590:	20000028 	.word	0x20000028
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000030 	.word	0x20000030

0800059c <USdetection_F>:

void USdetection_F(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	//Impulsion de 10us envoyee par TRIG
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	482b      	ldr	r0, [pc, #172]	; (8000658 <USdetection_F+0xbc>)
 80005aa:	f000 fec3 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005ae:	200a      	movs	r0, #10
 80005b0:	f000 fc1a 	bl	8000de8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4827      	ldr	r0, [pc, #156]	; (8000658 <USdetection_F+0xbc>)
 80005bc:	f000 feba 	bl	8001334 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 fc11 	bl	8000de8 <HAL_Delay>

	//Reception de l'impulsion par ECHO
	Pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	4823      	ldr	r0, [pc, #140]	; (8000658 <USdetection_F+0xbc>)
 80005cc:	f000 fe9a 	bl	8001304 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <USdetection_F+0xc0>)
 80005d6:	701a      	strb	r2, [r3, #0]

	//Test 1 : On eteint la LED lorsque que Echo detecte un front
	if(Pinstate == GPIO_PIN_RESET){
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <USdetection_F+0xc0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d105      	bne.n	80005ec <USdetection_F+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <USdetection_F+0xbc>)
 80005e6:	f000 fea5 	bl	8001334 <HAL_GPIO_WritePin>
 80005ea:	e004      	b.n	80005f6 <USdetection_F+0x5a>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <USdetection_F+0xbc>)
 80005f2:	f000 fe9f 	bl	8001334 <HAL_GPIO_WritePin>

	}

	//On releve la duree du front montant
	debut = HAL_GetTick();
 80005f6:	f000 fbeb 	bl	8000dd0 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <USdetection_F+0xc4>)
 8000600:	601a      	str	r2, [r3, #0]

	//On releve le temps final tant que le ECHO est a l'etat haut
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET){
 8000602:	e005      	b.n	8000610 <USdetection_F+0x74>
		fin = HAL_GetTick();
 8000604:	f000 fbe4 	bl	8000dd0 <HAL_GetTick>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <USdetection_F+0xc8>)
 800060e:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET){
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <USdetection_F+0xbc>)
 8000616:	f000 fe75 	bl	8001304 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d0f1      	beq.n	8000604 <USdetection_F+0x68>
	}

	//Duree inferieure a 1ms = assez proche du capteur -> clignotement de LED
	if (fin-debut < 1){
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <USdetection_F+0xc8>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <USdetection_F+0xc4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	dc0f      	bgt.n	800064e <USdetection_F+0xb2>
		for(int i=0;i<9;i++){
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e009      	b.n	8000648 <USdetection_F+0xac>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000634:	2120      	movs	r1, #32
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <USdetection_F+0xbc>)
 8000638:	f000 fe95 	bl	8001366 <HAL_GPIO_TogglePin>
			HAL_Delay(75);
 800063c:	204b      	movs	r0, #75	; 0x4b
 800063e:	f000 fbd3 	bl	8000de8 <HAL_Delay>
		for(int i=0;i<9;i++){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b08      	cmp	r3, #8
 800064c:	ddf2      	ble.n	8000634 <USdetection_F+0x98>
	}

	//Attente avant re-detection
	//HAL_Delay(1000);

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020000 	.word	0x40020000
 800065c:	20000028 	.word	0x20000028
 8000660:	2000002c 	.word	0x2000002c
 8000664:	20000030 	.word	0x20000030

08000668 <USdetection_R>:


void USdetection_R(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	//Impulsion de 10us envoyee par TRIG
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	482b      	ldr	r0, [pc, #172]	; (8000720 <USdetection_R+0xb8>)
 8000674:	f000 fe5e 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000678:	200a      	movs	r0, #10
 800067a:	f000 fbb5 	bl	8000de8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	4827      	ldr	r0, [pc, #156]	; (8000720 <USdetection_R+0xb8>)
 8000684:	f000 fe56 	bl	8001334 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fbad 	bl	8000de8 <HAL_Delay>

	//Reception de l'impulsion par ECHO
	Pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800068e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000692:	4824      	ldr	r0, [pc, #144]	; (8000724 <USdetection_R+0xbc>)
 8000694:	f000 fe36 	bl	8001304 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <USdetection_R+0xc0>)
 800069e:	701a      	strb	r2, [r3, #0]

	//Test 1 : On eteint la LED lorsque que Echo detecte un front
	if(Pinstate == GPIO_PIN_RESET){
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <USdetection_R+0xc0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d105      	bne.n	80006b4 <USdetection_R+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <USdetection_R+0xbc>)
 80006ae:	f000 fe41 	bl	8001334 <HAL_GPIO_WritePin>
 80006b2:	e004      	b.n	80006be <USdetection_R+0x56>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2120      	movs	r1, #32
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <USdetection_R+0xbc>)
 80006ba:	f000 fe3b 	bl	8001334 <HAL_GPIO_WritePin>

	}

	//On releve la duree du front montant
	debut = HAL_GetTick();
 80006be:	f000 fb87 	bl	8000dd0 <HAL_GetTick>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <USdetection_R+0xc4>)
 80006c8:	601a      	str	r2, [r3, #0]

	//On releve le temps final tant que le ECHO est a l'etat haut
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET){
 80006ca:	e005      	b.n	80006d8 <USdetection_R+0x70>
		fin = HAL_GetTick();
 80006cc:	f000 fb80 	bl	8000dd0 <HAL_GetTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <USdetection_R+0xc8>)
 80006d6:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET){
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <USdetection_R+0xbc>)
 80006de:	f000 fe11 	bl	8001304 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d0f1      	beq.n	80006cc <USdetection_R+0x64>
	}

	//Duree inferieure a 1ms = assez proche du capteur -> clignotement de LED
	if (fin-debut < 1){
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <USdetection_R+0xc8>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <USdetection_R+0xc4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dc0f      	bgt.n	8000716 <USdetection_R+0xae>
		for(int i=0;i<9;i++){
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e009      	b.n	8000710 <USdetection_R+0xa8>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006fc:	2120      	movs	r1, #32
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <USdetection_R+0xbc>)
 8000700:	f000 fe31 	bl	8001366 <HAL_GPIO_TogglePin>
			HAL_Delay(75);
 8000704:	204b      	movs	r0, #75	; 0x4b
 8000706:	f000 fb6f 	bl	8000de8 <HAL_Delay>
		for(int i=0;i<9;i++){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3301      	adds	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b08      	cmp	r3, #8
 8000714:	ddf2      	ble.n	80006fc <USdetection_R+0x94>
	}

	//Attente avant re-detection
	//HAL_Delay(1000);

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020400 	.word	0x40020400
 8000724:	40020000 	.word	0x40020000
 8000728:	20000028 	.word	0x20000028
 800072c:	2000002c 	.word	0x2000002c
 8000730:	20000030 	.word	0x20000030

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  HAL_TIM_Base_Start(&htim1);
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <main+0x2c>)
 800073a:	f001 fb17 	bl	8001d6c <HAL_TIM_Base_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fae1 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f80f 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f8f3 	bl	8000930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074a:	f000 f8c7 	bl	80008dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800074e:	f000 f875 	bl	800083c <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USdetection_F();
 8000752:	f7ff ff23 	bl	800059c <USdetection_F>
	  USdetection_L();
 8000756:	f7ff febf 	bl	80004d8 <USdetection_L>
	  USdetection_R();
 800075a:	f7ff ff85 	bl	8000668 <USdetection_R>
	  USdetection_F();
 800075e:	e7f8      	b.n	8000752 <main+0x1e>
 8000760:	20000034 	.word	0x20000034

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f002 f88a 	bl	800288c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a28      	ldr	r2, [pc, #160]	; (8000834 <SystemClock_Config+0xd0>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <SystemClock_Config+0xd4>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <SystemClock_Config+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d8:	2310      	movs	r3, #16
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e6:	2307      	movs	r3, #7
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fdd4 	bl	800139c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 f95f 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f836 	bl	800188c <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000826:	f000 f949 	bl	8000abc <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_TIM1_Init+0x98>)
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <MX_TIM1_Init+0x9c>)
 800085c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM1_Init+0x98>)
 8000860:	2253      	movs	r2, #83	; 0x53
 8000862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_TIM1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM1_Init+0x98>)
 800086c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000870:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_TIM1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_TIM1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_TIM1_Init+0x98>)
 8000886:	f001 fa21 	bl	8001ccc <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f914 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_TIM1_Init+0x98>)
 80008a2:	f001 fabd 	bl	8001e20 <HAL_TIM_ConfigClockSource>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008ac:	f000 f906 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_TIM1_Init+0x98>)
 80008be:	f001 fc91 	bl	80021e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c8:	f000 f8f8 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000034 	.word	0x20000034
 80008d8:	40010000 	.word	0x40010000

080008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_USART2_UART_Init+0x50>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 8000914:	f001 fcd4 	bl	80022c0 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091e:	f000 f8cd 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000007c 	.word	0x2000007c
 800092c:	40004400 	.word	0x40004400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b58      	ldr	r3, [pc, #352]	; (8000aac <MX_GPIO_Init+0x17c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a57      	ldr	r2, [pc, #348]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b55      	ldr	r3, [pc, #340]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b51      	ldr	r3, [pc, #324]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a50      	ldr	r2, [pc, #320]	; (8000aac <MX_GPIO_Init+0x17c>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b4e      	ldr	r3, [pc, #312]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a49      	ldr	r2, [pc, #292]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b47      	ldr	r3, [pc, #284]	; (8000aac <MX_GPIO_Init+0x17c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <MX_GPIO_Init+0x17c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a42      	ldr	r2, [pc, #264]	; (8000aac <MX_GPIO_Init+0x17c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b40      	ldr	r3, [pc, #256]	; (8000aac <MX_GPIO_Init+0x17c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f240 2132 	movw	r1, #562	; 0x232
 80009bc:	483c      	ldr	r0, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x180>)
 80009be:	f000 fcb9 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	483b      	ldr	r0, [pc, #236]	; (8000ab4 <MX_GPIO_Init+0x184>)
 80009c8:	f000 fcb4 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2170      	movs	r1, #112	; 0x70
 80009d0:	4839      	ldr	r0, [pc, #228]	; (8000ab8 <MX_GPIO_Init+0x188>)
 80009d2:	f000 fcaf 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4831      	ldr	r0, [pc, #196]	; (8000ab4 <MX_GPIO_Init+0x184>)
 80009ee:	f000 fb05 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_10;
 80009f2:	f240 5301 	movw	r3, #1281	; 0x501
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x180>)
 8000a08:	f000 faf8 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_9;
 8000a0c:	f240 2332 	movw	r3, #562	; 0x232
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4822      	ldr	r0, [pc, #136]	; (8000ab0 <MX_GPIO_Init+0x180>)
 8000a26:	f000 fae9 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_GPIO_Init+0x180>)
 8000a46:	f000 fad9 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000a4a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_GPIO_Init+0x188>)
 8000a68:	f000 fac8 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_GPIO_Init+0x184>)
 8000a84:	f000 faba 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a88:	2370      	movs	r3, #112	; 0x70
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_GPIO_Init+0x188>)
 8000aa0:	f000 faac 	bl	8000ffc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020400 	.word	0x40020400

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 fa44 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_TIM_Base_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12c      	bne.n	8000b94 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_TIM_Base_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_TIM_Base_MspInit+0x88>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_TIM_Base_MspInit+0x88>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_TIM_Base_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_TIM_Base_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_TIM_Base_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8000b90:	f000 fa34 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_UART_MspInit+0x8c>)
 8000c1e:	f000 f9ed 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f890 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f001 fdb1 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fd27 	bl	8000734 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf4:	080028dc 	.word	0x080028dc
  ldr r2, =_sbss
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cfc:	200000c4 	.word	0x200000c4

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f931 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fec6 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f93b 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f000 f911 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200000c0 	.word	0x200000c0

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200000c0 	.word	0x200000c0

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff47 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff5c 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb0 	bl	8000f50 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e159      	b.n	80012cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8148 	bne.w	80012c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80a2 	beq.w	80012c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_GPIO_Init+0x2ec>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_GPIO_Init+0x2f0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x202>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2f4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x1fe>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <HAL_GPIO_Init+0x2f8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_GPIO_Init+0x2fc>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x1f6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a45      	ldr	r2, [pc, #276]	; (80012fc <HAL_GPIO_Init+0x300>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x1f2>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x2ec>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x304>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x304>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x304>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f aea2 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001378:	887a      	ldrh	r2, [r7, #2]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4013      	ands	r3, r2
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43d9      	mvns	r1, r3
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	400b      	ands	r3, r1
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e267      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4b85      	ldr	r3, [pc, #532]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e242      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6c      	ldr	r2, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fcbc 	bl	8000dd0 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fcb8 	bl	8000dd0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e207      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fca8 	bl	8000dd0 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fca4 	bl	8000dd0 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f3      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c7      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fc5d 	bl	8000dd0 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fc59 	bl	8000dd0 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a8      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fc3c 	bl	8000dd0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fc38 	bl	8000dd0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e187      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fc1c 	bl	8000dd0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fc18 	bl	8000dd0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e167      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fc05 	bl	8000dd0 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fc01 	bl	8000dd0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e150      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b7a      	ldr	r3, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fbc1 	bl	8000dd0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fbbd 	bl	8000dd0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e10c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb82 	bl	8000dd0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb7e 	bl	8000dd0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0cb      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fb6c 	bl	8000dd0 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fb68 	bl	8000dd0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0b5      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a1 	beq.w	800187c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d05c      	beq.n	8001800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d141      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb3c 	bl	8000dd0 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb38 	bl	8000dd0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e087      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb11 	bl	8000dd0 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fb0d 	bl	8000dd0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e05c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017d0:	e054      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fafa 	bl	8000dd0 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff faf6 	bl	8000dd0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e045      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e038      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d028      	beq.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d121      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa28 	bl	8000dd0 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa24 	bl	8000dd0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f988 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	080028b4 	.word	0x080028b4
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b094      	sub	sp, #80	; 0x50
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	2300      	movs	r3, #0
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80e1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e0db      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a90:	e0db      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a96:	e0d8      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aca:	4622      	mov	r2, r4
 8001acc:	462b      	mov	r3, r5
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0159      	lsls	r1, r3, #5
 8001ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001adc:	0150      	lsls	r0, r2, #5
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	1a51      	subs	r1, r2, r1
 8001ae6:	6139      	str	r1, [r7, #16]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001afc:	4659      	mov	r1, fp
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	4651      	mov	r1, sl
 8001b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b06:	4651      	mov	r1, sl
 8001b08:	018a      	lsls	r2, r1, #6
 8001b0a:	4651      	mov	r1, sl
 8001b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b10:	4659      	mov	r1, fp
 8001b12:	eb63 0901 	sbc.w	r9, r3, r1
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	eb18 0303 	adds.w	r3, r8, r3
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	462b      	mov	r3, r5
 8001b38:	eb49 0303 	adc.w	r3, r9, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	024b      	lsls	r3, r1, #9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b54:	4621      	mov	r1, r4
 8001b56:	024a      	lsls	r2, r1, #9
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b68:	f7fe fb34 	bl	80001d4 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4611      	mov	r1, r2
 8001b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b90:	4642      	mov	r2, r8
 8001b92:	464b      	mov	r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0159      	lsls	r1, r3, #5
 8001b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba2:	0150      	lsls	r0, r2, #5
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bae:	4649      	mov	r1, r9
 8001bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	464b      	mov	r3, r9
 8001bec:	eb45 0303 	adc.w	r3, r5, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c12:	2200      	movs	r2, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	61fa      	str	r2, [r7, #28]
 8001c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1c:	f7fe fada 	bl	80001d4 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3750      	adds	r7, #80	; 0x50
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	080028c4 	.word	0x080028c4

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	080028c4 	.word	0x080028c4

08001ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe ff10 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f950 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d001      	beq.n	8001d84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e03c      	b.n	8001dfe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_TIM_Base_Start+0xa0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_TIM_Base_Start+0x5c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d013      	beq.n	8001dc8 <HAL_TIM_Base_Start+0x5c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_TIM_Base_Start+0xa4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_TIM_Base_Start+0x5c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_TIM_Base_Start+0xa8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_TIM_Base_Start+0x5c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_TIM_Base_Start+0xac>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_TIM_Base_Start+0x5c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_TIM_Base_Start+0xb0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d111      	bne.n	8001dec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d010      	beq.n	8001dfc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dea:	e007      	b.n	8001dfc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	40014000 	.word	0x40014000

08001e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_TIM_ConfigClockSource+0x1c>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0b4      	b.n	8001fa6 <HAL_TIM_ConfigClockSource+0x186>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e74:	d03e      	beq.n	8001ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8001e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7a:	f200 8087 	bhi.w	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e82:	f000 8086 	beq.w	8001f92 <HAL_TIM_ConfigClockSource+0x172>
 8001e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8a:	d87f      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001e8c:	2b70      	cmp	r3, #112	; 0x70
 8001e8e:	d01a      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d87b      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001e94:	2b60      	cmp	r3, #96	; 0x60
 8001e96:	d050      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x11a>
 8001e98:	2b60      	cmp	r3, #96	; 0x60
 8001e9a:	d877      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001e9c:	2b50      	cmp	r3, #80	; 0x50
 8001e9e:	d03c      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xfa>
 8001ea0:	2b50      	cmp	r3, #80	; 0x50
 8001ea2:	d873      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	d058      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0x13a>
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d86f      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001eac:	2b30      	cmp	r3, #48	; 0x30
 8001eae:	d064      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x15a>
 8001eb0:	2b30      	cmp	r3, #48	; 0x30
 8001eb2:	d86b      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d060      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x15a>
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d867      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05c      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x15a>
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d05a      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x15a>
 8001ec4:	e062      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f000 f965 	bl	80021a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	609a      	str	r2, [r3, #8]
      break;
 8001ef2:	e04f      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6899      	ldr	r1, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f000 f94e 	bl	80021a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f16:	609a      	str	r2, [r3, #8]
      break;
 8001f18:	e03c      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f000 f8c2 	bl	80020b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2150      	movs	r1, #80	; 0x50
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f91b 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001f38:	e02c      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f000 f8e1 	bl	800210e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2160      	movs	r1, #96	; 0x60
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f90b 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001f58:	e01c      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f000 f8a2 	bl	80020b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2140      	movs	r1, #64	; 0x40
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f8fb 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001f78:	e00c      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f000 f8f2 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001f8a:	e003      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f90:	e000      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a34      	ldr	r2, [pc, #208]	; (8002094 <TIM_Base_SetConfig+0xe4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00f      	beq.n	8001fe8 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d00b      	beq.n	8001fe8 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a31      	ldr	r2, [pc, #196]	; (8002098 <TIM_Base_SetConfig+0xe8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <TIM_Base_SetConfig+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a30      	ldr	r2, [pc, #192]	; (800209c <TIM_Base_SetConfig+0xec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0x38>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <TIM_Base_SetConfig+0xf0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d108      	bne.n	8001ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <TIM_Base_SetConfig+0xe4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01b      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002008:	d017      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <TIM_Base_SetConfig+0xe8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a21      	ldr	r2, [pc, #132]	; (800209c <TIM_Base_SetConfig+0xec>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00f      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <TIM_Base_SetConfig+0xf0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00b      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <TIM_Base_SetConfig+0xf4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <TIM_Base_SetConfig+0xf8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <TIM_Base_SetConfig+0xfc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d108      	bne.n	800204c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <TIM_Base_SetConfig+0xe4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d103      	bne.n	8002080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	615a      	str	r2, [r3, #20]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010000 	.word	0x40010000
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800
 80020a0:	40000c00 	.word	0x40000c00
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800

080020b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0201 	bic.w	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f023 030a 	bic.w	r3, r3, #10
 80020ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	621a      	str	r2, [r3, #32]
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210e:	b480      	push	{r7}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f023 0210 	bic.w	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800214a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	621a      	str	r2, [r3, #32]
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	f043 0307 	orr.w	r3, r3, #7
 8002190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	609a      	str	r2, [r3, #8]
}
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e050      	b.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002248:	d013      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10c      	bne.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4313      	orrs	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40000c00 	.word	0x40000c00
 80022bc:	40014000 	.word	0x40014000

080022c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e03f      	b.n	8002352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fc5e 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f829 	bl	800235c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800235c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002360:	b0c0      	sub	sp, #256	; 0x100
 8002362:	af00      	add	r7, sp, #0
 8002364:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	ea40 0301 	orr.w	r3, r0, r1
 8002384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	431a      	orrs	r2, r3
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023b4:	f021 010c 	bic.w	r1, r1, #12
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023c2:	430b      	orrs	r3, r1
 80023c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	6999      	ldr	r1, [r3, #24]
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	ea40 0301 	orr.w	r3, r0, r1
 80023e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <UART_SetConfig+0x2cc>)
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d005      	beq.n	80023fc <UART_SetConfig+0xa0>
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b8d      	ldr	r3, [pc, #564]	; (800262c <UART_SetConfig+0x2d0>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d104      	bne.n	8002406 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fc52 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8002400:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002404:	e003      	b.n	800240e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002406:	f7ff fc39 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 800240a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002418:	f040 810c 	bne.w	8002634 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800241c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002426:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800242a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	1891      	adds	r1, r2, r2
 8002434:	65b9      	str	r1, [r7, #88]	; 0x58
 8002436:	415b      	adcs	r3, r3
 8002438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800243a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800243e:	4621      	mov	r1, r4
 8002440:	eb12 0801 	adds.w	r8, r2, r1
 8002444:	4629      	mov	r1, r5
 8002446:	eb43 0901 	adc.w	r9, r3, r1
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800245a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800245e:	4690      	mov	r8, r2
 8002460:	4699      	mov	r9, r3
 8002462:	4623      	mov	r3, r4
 8002464:	eb18 0303 	adds.w	r3, r8, r3
 8002468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800246c:	462b      	mov	r3, r5
 800246e:	eb49 0303 	adc.w	r3, r9, r3
 8002472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800248a:	460b      	mov	r3, r1
 800248c:	18db      	adds	r3, r3, r3
 800248e:	653b      	str	r3, [r7, #80]	; 0x50
 8002490:	4613      	mov	r3, r2
 8002492:	eb42 0303 	adc.w	r3, r2, r3
 8002496:	657b      	str	r3, [r7, #84]	; 0x54
 8002498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800249c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024a0:	f7fd fe98 	bl	80001d4 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4b61      	ldr	r3, [pc, #388]	; (8002630 <UART_SetConfig+0x2d4>)
 80024aa:	fba3 2302 	umull	r2, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	011c      	lsls	r4, r3, #4
 80024b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024c4:	4642      	mov	r2, r8
 80024c6:	464b      	mov	r3, r9
 80024c8:	1891      	adds	r1, r2, r2
 80024ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80024cc:	415b      	adcs	r3, r3
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024d4:	4641      	mov	r1, r8
 80024d6:	eb12 0a01 	adds.w	sl, r2, r1
 80024da:	4649      	mov	r1, r9
 80024dc:	eb43 0b01 	adc.w	fp, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f4:	4692      	mov	sl, r2
 80024f6:	469b      	mov	fp, r3
 80024f8:	4643      	mov	r3, r8
 80024fa:	eb1a 0303 	adds.w	r3, sl, r3
 80024fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002502:	464b      	mov	r3, r9
 8002504:	eb4b 0303 	adc.w	r3, fp, r3
 8002508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002518:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800251c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002520:	460b      	mov	r3, r1
 8002522:	18db      	adds	r3, r3, r3
 8002524:	643b      	str	r3, [r7, #64]	; 0x40
 8002526:	4613      	mov	r3, r2
 8002528:	eb42 0303 	adc.w	r3, r2, r3
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
 800252e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002536:	f7fd fe4d 	bl	80001d4 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4611      	mov	r1, r2
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <UART_SetConfig+0x2d4>)
 8002542:	fba3 2301 	umull	r2, r3, r3, r1
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2264      	movs	r2, #100	; 0x64
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	1acb      	subs	r3, r1, r3
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <UART_SetConfig+0x2d4>)
 8002558:	fba3 2302 	umull	r2, r3, r3, r2
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002564:	441c      	add	r4, r3
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002570:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	1891      	adds	r1, r2, r2
 800257e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002580:	415b      	adcs	r3, r3
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002588:	4641      	mov	r1, r8
 800258a:	1851      	adds	r1, r2, r1
 800258c:	6339      	str	r1, [r7, #48]	; 0x30
 800258e:	4649      	mov	r1, r9
 8002590:	414b      	adcs	r3, r1
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025a0:	4659      	mov	r1, fp
 80025a2:	00cb      	lsls	r3, r1, #3
 80025a4:	4651      	mov	r1, sl
 80025a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025aa:	4651      	mov	r1, sl
 80025ac:	00ca      	lsls	r2, r1, #3
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	4642      	mov	r2, r8
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025bc:	464b      	mov	r3, r9
 80025be:	460a      	mov	r2, r1
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025dc:	460b      	mov	r3, r1
 80025de:	18db      	adds	r3, r3, r3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	4613      	mov	r3, r2
 80025e4:	eb42 0303 	adc.w	r3, r2, r3
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025f2:	f7fd fdef 	bl	80001d4 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <UART_SetConfig+0x2d4>)
 80025fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	2164      	movs	r1, #100	; 0x64
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3332      	adds	r3, #50	; 0x32
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <UART_SetConfig+0x2d4>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	f003 0207 	and.w	r2, r3, #7
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4422      	add	r2, r4
 8002622:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002624:	e105      	b.n	8002832 <UART_SetConfig+0x4d6>
 8002626:	bf00      	nop
 8002628:	40011000 	.word	0x40011000
 800262c:	40011400 	.word	0x40011400
 8002630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002638:	2200      	movs	r2, #0
 800263a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800263e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002646:	4642      	mov	r2, r8
 8002648:	464b      	mov	r3, r9
 800264a:	1891      	adds	r1, r2, r2
 800264c:	6239      	str	r1, [r7, #32]
 800264e:	415b      	adcs	r3, r3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002656:	4641      	mov	r1, r8
 8002658:	1854      	adds	r4, r2, r1
 800265a:	4649      	mov	r1, r9
 800265c:	eb43 0501 	adc.w	r5, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	00eb      	lsls	r3, r5, #3
 800266a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800266e:	00e2      	lsls	r2, r4, #3
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4643      	mov	r3, r8
 8002676:	18e3      	adds	r3, r4, r3
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800267c:	464b      	mov	r3, r9
 800267e:	eb45 0303 	adc.w	r3, r5, r3
 8002682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026a2:	4629      	mov	r1, r5
 80026a4:	008b      	lsls	r3, r1, #2
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ac:	4621      	mov	r1, r4
 80026ae:	008a      	lsls	r2, r1, #2
 80026b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026b4:	f7fd fd8e 	bl	80001d4 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4b60      	ldr	r3, [pc, #384]	; (8002840 <UART_SetConfig+0x4e4>)
 80026be:	fba3 2302 	umull	r2, r3, r3, r2
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	011c      	lsls	r4, r3, #4
 80026c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026d8:	4642      	mov	r2, r8
 80026da:	464b      	mov	r3, r9
 80026dc:	1891      	adds	r1, r2, r2
 80026de:	61b9      	str	r1, [r7, #24]
 80026e0:	415b      	adcs	r3, r3
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e8:	4641      	mov	r1, r8
 80026ea:	1851      	adds	r1, r2, r1
 80026ec:	6139      	str	r1, [r7, #16]
 80026ee:	4649      	mov	r1, r9
 80026f0:	414b      	adcs	r3, r1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002700:	4659      	mov	r1, fp
 8002702:	00cb      	lsls	r3, r1, #3
 8002704:	4651      	mov	r1, sl
 8002706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800270a:	4651      	mov	r1, sl
 800270c:	00ca      	lsls	r2, r1, #3
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	4603      	mov	r3, r0
 8002714:	4642      	mov	r2, r8
 8002716:	189b      	adds	r3, r3, r2
 8002718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800271c:	464b      	mov	r3, r9
 800271e:	460a      	mov	r2, r1
 8002720:	eb42 0303 	adc.w	r3, r2, r3
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	67bb      	str	r3, [r7, #120]	; 0x78
 8002732:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002740:	4649      	mov	r1, r9
 8002742:	008b      	lsls	r3, r1, #2
 8002744:	4641      	mov	r1, r8
 8002746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800274a:	4641      	mov	r1, r8
 800274c:	008a      	lsls	r2, r1, #2
 800274e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002752:	f7fd fd3f 	bl	80001d4 <__aeabi_uldivmod>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <UART_SetConfig+0x4e4>)
 800275c:	fba3 1302 	umull	r1, r3, r3, r2
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	2164      	movs	r1, #100	; 0x64
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	3332      	adds	r3, #50	; 0x32
 800276e:	4a34      	ldr	r2, [pc, #208]	; (8002840 <UART_SetConfig+0x4e4>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277a:	441c      	add	r4, r3
 800277c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002780:	2200      	movs	r2, #0
 8002782:	673b      	str	r3, [r7, #112]	; 0x70
 8002784:	677a      	str	r2, [r7, #116]	; 0x74
 8002786:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800278a:	4642      	mov	r2, r8
 800278c:	464b      	mov	r3, r9
 800278e:	1891      	adds	r1, r2, r2
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	415b      	adcs	r3, r3
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800279a:	4641      	mov	r1, r8
 800279c:	1851      	adds	r1, r2, r1
 800279e:	6039      	str	r1, [r7, #0]
 80027a0:	4649      	mov	r1, r9
 80027a2:	414b      	adcs	r3, r1
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027b2:	4659      	mov	r1, fp
 80027b4:	00cb      	lsls	r3, r1, #3
 80027b6:	4651      	mov	r1, sl
 80027b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027bc:	4651      	mov	r1, sl
 80027be:	00ca      	lsls	r2, r1, #3
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	4603      	mov	r3, r0
 80027c6:	4642      	mov	r2, r8
 80027c8:	189b      	adds	r3, r3, r2
 80027ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80027cc:	464b      	mov	r3, r9
 80027ce:	460a      	mov	r2, r1
 80027d0:	eb42 0303 	adc.w	r3, r2, r3
 80027d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	663b      	str	r3, [r7, #96]	; 0x60
 80027e0:	667a      	str	r2, [r7, #100]	; 0x64
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027ee:	4649      	mov	r1, r9
 80027f0:	008b      	lsls	r3, r1, #2
 80027f2:	4641      	mov	r1, r8
 80027f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f8:	4641      	mov	r1, r8
 80027fa:	008a      	lsls	r2, r1, #2
 80027fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002800:	f7fd fce8 	bl	80001d4 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <UART_SetConfig+0x4e4>)
 800280a:	fba3 1302 	umull	r1, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2164      	movs	r1, #100	; 0x64
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a08      	ldr	r2, [pc, #32]	; (8002840 <UART_SetConfig+0x4e4>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 020f 	and.w	r2, r3, #15
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4422      	add	r2, r4
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	bf00      	nop
 8002834:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283e:	bf00      	nop
 8002840:	51eb851f 	.word	0x51eb851f

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	4d0d      	ldr	r5, [pc, #52]	; (800287c <__libc_init_array+0x38>)
 8002848:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <__libc_init_array+0x3c>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	2600      	movs	r6, #0
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	4d0b      	ldr	r5, [pc, #44]	; (8002884 <__libc_init_array+0x40>)
 8002856:	4c0c      	ldr	r4, [pc, #48]	; (8002888 <__libc_init_array+0x44>)
 8002858:	f000 f820 	bl	800289c <_init>
 800285c:	1b64      	subs	r4, r4, r5
 800285e:	10a4      	asrs	r4, r4, #2
 8002860:	2600      	movs	r6, #0
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	080028d4 	.word	0x080028d4
 8002880:	080028d4 	.word	0x080028d4
 8002884:	080028d4 	.word	0x080028d4
 8002888:	080028d8 	.word	0x080028d8

0800288c <memset>:
 800288c:	4402      	add	r2, r0
 800288e:	4603      	mov	r3, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <_init>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr

080028a8 <_fini>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr
